{"version":3,"file":"ngx-goox-lib.mjs","sources":["../../../projects/ngx-goox-lib/src/lib/Contact.ts","../../../projects/ngx-goox-lib/src/lib/Document.ts","../../../projects/ngx-goox-lib/src/lib/Address.ts","../../../projects/ngx-goox-lib/src/lib/Account.ts","../../../projects/ngx-goox-lib/src/lib/LoginParams.ts","../../../projects/ngx-goox-lib/src/lib/TokenData.ts","../../../projects/ngx-goox-lib/src/lib/AuditLog.ts","../../../projects/ngx-goox-lib/src/lib/Campaign.ts","../../../projects/ngx-goox-lib/src/lib/Lead.ts","../../../projects/ngx-goox-lib/src/lib/User.ts","../../../projects/ngx-goox-lib/src/lib/TimeFrame.ts","../../../projects/ngx-goox-lib/src/lib/BaseEntity.ts","../../../projects/ngx-goox-lib/src/lib/CurrencyCode.ts","../../../projects/ngx-goox-lib/src/lib/LeadStatusCode.ts","../../../projects/ngx-goox-lib/src/lib/UserStatusCode.ts","../../../projects/ngx-goox-lib/src/lib/UserTypeCode.ts","../../../projects/ngx-goox-lib/src/lib/AccountStatusCode.ts","../../../projects/ngx-goox-lib/src/lib/CampaignStatusCode.ts","../../../projects/ngx-goox-lib/src/lib/CampaignTypeCode.ts","../../../projects/ngx-goox-lib/src/utils/BaseRestResponse.ts","../../../projects/ngx-goox-lib/src/utils/ActionResponse.ts","../../../projects/ngx-goox-lib/src/utils/EntityResponse.ts","../../../projects/ngx-goox-lib/src/utils/EntitiesResponse.ts","../../../projects/ngx-goox-lib/src/utils/rest-util.ts","../../../projects/ngx-goox-lib/src/config.ts","../../../projects/ngx-goox-lib/src/lib/DocumentsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/LeadsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/UserEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/UsersEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/AccountsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/AuditLogsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/CampaignsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/ContactsEndPoint.ts","../../../projects/ngx-goox-lib/src/lib/services.export.ts","../../../projects/ngx-goox-lib/src/ngx-goox-lib.module.ts","../../../projects/ngx-goox-lib/src/public-api.ts","../../../projects/ngx-goox-lib/src/ngx-goox-lib.ts"],"sourcesContent":["\nimport { AccountStatusCode } from '.';\nimport { Address } from '.';\nimport { BaseEntity } from '.';\n\n\n\n// Contact entity is a billing account in the system\nexport class Contact extends BaseEntity {\n \n    // First name \n    public firstName: string;\n \n    // Last name \n    public lastName: string;\n \n    // Contact description \n    public description: string;\n \n    // Title in the account \n    public title: string;\n \n    // Contact birthday \n    public birthDay: number;\n \n    // Contact status: UNDEFINED | ACTIVE | INACTIVE | BLOCKED | SUSPENDE \n    public status: AccountStatusCode;\n \n    // Office / Landline phone \n    public phone: string;\n \n    // Office / Landline fax \n    public fax: string;\n \n    // Mobile phone \n    public mobile: string;\n \n    // Primary address \n    public primaryAddress: Address;\n \n    // Total single engine hours \n    public singleEngineHours: number;\n \n    // Total dual engine hours \n    public dualEngineHours: number;\n \n    // Total flight hours \n    public totalFlightHours: number;\n \n    // Is credit enabled for this account \n    public enableCredit: boolean;\n \n    // Current account credit \n    public currentCredit: number;\n \n    // Permanent discount (percentage) \n    public percentageDiscount: number;\n \n    // Contact groups \n    public groups: string[];\n \n    // ID number \n    public idNumber: string;\n \n    // Start to fly on [epoch time milliseconds] \n    public startToFlyDate: number;\n \n    // Pilot license number \n    public pilotLicense: string;\n \n    // Pilot license type \n    public licenseTypes: string[];\n \n    // Pilot license group \n    public licenseGroup: string;\n \n    // Medical certificate class \n    public medicalCertClass: string;\n \n \n}\n\n\n","\nimport { BaseEntity } from '.';\n\n\n\n// Document entity represents a document in the system\nexport class Document extends BaseEntity {\n \n    // Document name \n    public name: string;\n \n    // Document URL \n    public url: string;\n \n    // Document creator \n    public createdBy: string;\n \n    // Document active from [epoch time milliseconds] \n    public activeFrom: number;\n \n    // Document active until [epoch time milliseconds] \n    public activeUntil: number;\n \n    // Document category \n    public category: string;\n \n \n}\n\n\n","\n\n\n\n// Address model represents an address\nexport class Address {\n \n    // Street address \n    public street: string;\n \n    // City \n    public city: string;\n \n    // State (if applicable) \n    public state: string;\n \n    // Local zip code (postal cod) \n    public zipCode: string;\n \n    // Country name \n    public country: string;\n \n     constructor(street?: string, city?: string, state?: string, zipCode?: string, country?: string) { \n        if (street !== undefined) { this.street = street; }\n        if (city !== undefined) { this.city = city; }\n        if (state !== undefined) { this.state = state; }\n        if (zipCode !== undefined) { this.zipCode = zipCode; }\n        if (country !== undefined) { this.country = country; }\n    }\n\n}\n\n\n","\nimport { AccountStatusCode } from '.';\nimport { Address } from '.';\nimport { BaseEntity } from '.';\n\n\n\n// Account entity is a billing account in the system\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account description \n    public description: string;\n \n    // Account status: UNDEFINED | ACTIVE | INACTIVE | BLOCKED | SUSPENDED \n    public status: AccountStatusCode;\n \n    // Office / Landline phone \n    public phone: string;\n \n    // Office / Landline fax \n    public fax: string;\n \n    // Mobile phone \n    public mobile: string;\n \n    // Billing address \n    public billingAddress: Address;\n \n    // Shipping address \n    public shippingAddress: Address;\n \n    // Campaign Id \n    public campaignId: string;\n \n    // Is credit enabled for this account \n    public enableCredit: boolean;\n \n    // Current account credit \n    public currentCredit: number;\n \n    // Permanent discount (percentage) \n    public percentageDiscount: number;\n \n \n}\n\n\n","\n\n\n\n// LoginParams model used for authorize user by email\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n     constructor(email?: string) { \n        if (email !== undefined) { this.email = email; }\n    }\n\n}\n\n\n","\nimport { UserStatusCode } from '.';\nimport { UserTypeCode } from '.';\n\n\n\n// TokenData model represents user in account which is encrypted with the JWT token\nexport class TokenData {\n \n    // Authenticated subject ID (can be user, or service account) \n    public subjectId: string;\n \n    // Subject type: UNDEFINED | SYSADMIN | USER | SERVICE_ACCOUNT \n    public subjectType: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // Token expiration [Epoch milliseconds Timestamp] \n    public expiresIn: number;\n \n     constructor(subjectId?: string, subjectType?: UserTypeCode, status?: UserStatusCode, expiresIn?: number) { \n        if (subjectId !== undefined) { this.subjectId = subjectId; }\n        if (subjectType !== undefined) { this.subjectType = subjectType; }\n        if (status !== undefined) { this.status = status; }\n        if (expiresIn !== undefined) { this.expiresIn = expiresIn; }\n    }\n\n}\n\n\n","\nimport { UserTypeCode } from '.';\nimport { BaseEntity } from '.';\n\n\n\n// AuditLog entity is a log entry in the audit log to track users / service account actions\nexport class AuditLog extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // User type: UNDEFINED | SYSADMIN | USER | SERVICE_ACCOUNT \n    public userType: UserTypeCode;\n \n    // Action that was performed \n    public action: string;\n \n    // Item type \n    public itemType: string;\n \n    // Item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n \n}\n\n\n","\nimport { CampaignStatusCode } from '.';\nimport { CurrencyCode } from '.';\nimport { BaseEntity } from '.';\nimport { CampaignTypeCode } from '.';\n\n\n\n// Campaign entity represents a marketing campaign in the system\nexport class Campaign extends BaseEntity {\n \n    // Campaign name \n    public name: string;\n \n    // Campaign type: UNDEFINED | WEB | MAIL | TELE \n    public type: CampaignTypeCode;\n \n    // Campaign status: UNDEFINED | PLANNED | ACTIVE | COMPLETED \n    public status: CampaignStatusCode;\n \n    // Campaign content \n    public content: string;\n \n    // Campaign start date \n    public startDate: number;\n \n    // Campaign end date \n    public endDate: number;\n \n    // Campaign budget \n    public budget: number;\n \n    // Base rate \n    public baseRate: number;\n \n    // Refer URL \n    public referUrl: string;\n \n    // Actual campaign cost \n    public expectedCost: number;\n \n    // Actual campaign cost \n    public actualCost: number;\n \n    // Currency code \n    public currency: CurrencyCode;\n \n \n}\n\n\n","\nimport { Address } from '.';\nimport { LeadStatusCode } from '.';\nimport { BaseEntity } from '.';\n\n\n\n// Lead entity is a lead in the CRM system\nexport class Lead extends BaseEntity {\n \n    // First name \n    public firstName: string;\n \n    // Last name \n    public lastName: string;\n \n    // Account description \n    public description: string;\n \n    // Office / Landline phone \n    public phone: string;\n \n    // Office / Landline fax \n    public fax: string;\n \n    // Mobile phone \n    public mobile: string;\n \n    // Primary address \n    public primaryAddress: Address;\n \n    // Lead source \n    public leadSource: string;\n \n    // Lead source description \n    public leadSourceDescription: string;\n \n    // Campaign Id \n    public campaignId: string;\n \n    // Account status: UNDEFINED | ACTIVE | INACTIVE | BLOCKED | SUSPENDED \n    public status: LeadStatusCode;\n \n    // Referred by \n    public referredBy: string;\n \n    // Notes \n    public notes: string;\n \n    // Assigned to user \n    public assignedTo: string;\n \n    // \n    public price: number;\n \n    // \n    public commission: number;\n \n    // \n    public totalCost: number;\n \n    // \n    public commissionPaid: boolean;\n \n \n}\n\n\n","\nimport { UserTypeCode } from '.';\nimport { UserStatusCode } from '.';\nimport { BaseEntity } from '.';\n\n\n\n// User represents a human / system operator that has access to the system, and can perform operations\n// User authentication is done by an external identity provider\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE |  BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n \n}\n\n\n","\n\n\n\nexport class TimeFrame {\n \n    // From Timestamp \n    public from: number;\n \n    // To Timestamp \n    public to: number;\n \n     constructor(from?: number, to?: number) { \n        if (from !== undefined) { this.from = from; }\n        if (to !== undefined) { this.to = to; }\n    }\n\n}\n\n\n","\n\n\n\n// Base class for all entities\nexport class BaseEntity {\n \n    // Unique object Id \n    public id: string;\n \n    // When the object was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the object was last updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n     constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        if (id !== undefined) { this.id = id; }\n        if (createdOn !== undefined) { this.createdOn = createdOn; }\n        if (updatedOn !== undefined) { this.updatedOn = updatedOn; }\n    }\n\n}\n\n\n","\n\n// CurrencyCode represents the currency: ILS | USD | EUR ...\nexport enum CurrencyCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // ILS [1] \n    ILS = 1,\n \n    // USD [2] \n    USD = 2,\n \n    // EURO [3] \n    EUR = 3,\n \n}\n\n// Return list of CurrencyCode values and their display names\nexport function GetCurrencyCodes() : Map<CurrencyCode, string> {\n\n    let result = new Map<CurrencyCode, string>();\n\n    \n    result.set(CurrencyCode.UNDEFINED, 'Undefined');\n    \n    result.set(CurrencyCode.ILS, 'Ils');\n    \n    result.set(CurrencyCode.USD, 'Usd');\n    \n    result.set(CurrencyCode.EUR, 'Eur');\n    \n\n    return result;\n}\n","\n\n// LeadStatusCode represents the lead status: NEW | INPROCESS | ASSIGNED ...\nexport enum LeadStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // New Lead [1] \n    NEW = 1,\n \n    // Lead in process [2] \n    INPROCESS = 2,\n \n    // Lead assigned [3] \n    ASSIGNED = 3,\n \n    // Lead converted [4] \n    CONVERTED = 4,\n \n    // Lead irrelevant [5] \n    IRRELEVANT = 5,\n \n    // Lead redirected [6] \n    REDIRECTED = 6,\n \n    // Lead recycled [7] \n    RECYCLED = 7,\n \n    // Lead is no longer exists [8] \n    DEAD = 8,\n \n}\n\n// Return list of LeadStatusCode values and their display names\nexport function GetLeadStatusCodes() : Map<LeadStatusCode, string> {\n\n    let result = new Map<LeadStatusCode, string>();\n\n    \n    result.set(LeadStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(LeadStatusCode.NEW, 'New');\n    \n    result.set(LeadStatusCode.INPROCESS, 'Inprocess');\n    \n    result.set(LeadStatusCode.ASSIGNED, 'Assigned');\n    \n    result.set(LeadStatusCode.CONVERTED, 'Converted');\n    \n    result.set(LeadStatusCode.IRRELEVANT, 'Irrelevant');\n    \n    result.set(LeadStatusCode.REDIRECTED, 'Redirected');\n    \n    result.set(LeadStatusCode.RECYCLED, 'Recycled');\n    \n    result.set(LeadStatusCode.DEAD, 'Dead');\n    \n\n    return result;\n}\n","\n\n// UserStatusCode represents the user status: PENDING | ACTIVE | BLOCKED ...\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [3] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}\n\n// Return list of UserStatusCode values and their display names\nexport function GetUserStatusCodes() : Map<UserStatusCode, string> {\n\n    let result = new Map<UserStatusCode, string>();\n\n    \n    result.set(UserStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserStatusCode.PENDING, 'Pending');\n    \n    result.set(UserStatusCode.ACTIVE, 'Active');\n    \n    result.set(UserStatusCode.BLOCKED, 'Blocked');\n    \n    result.set(UserStatusCode.SUSPENDED, 'Suspended');\n    \n\n    return result;\n}\n","\n\n// UserTypeCode represents the user type: SYSADMIN | SUPPORT | USER ...\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [3] \n    USER = 3,\n \n    // Service Account - to be used by other systems to perform actions using the API (can't login as a user to the portal) [4] \n    SERVICE = 4,\n \n}\n\n// Return list of UserTypeCode values and their display names\nexport function GetUserTypeCodes() : Map<UserTypeCode, string> {\n\n    let result = new Map<UserTypeCode, string>();\n\n    \n    result.set(UserTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(UserTypeCode.SYSADMIN, 'Sysadmin');\n    \n    result.set(UserTypeCode.SUPPORT, 'Support');\n    \n    result.set(UserTypeCode.USER, 'User');\n    \n    result.set(UserTypeCode.SERVICE, 'Service');\n    \n\n    return result;\n}\n","\n\n// AccountStatusCode represents the account status: ACTIVE | INACTIVE | BLOCKED ...\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account in the system [1] \n    ACTIVE = 1,\n \n    // Inactive account in the system [2] \n    INACTIVE = 2,\n \n    // Blocked account [3] \n    BLOCKED = 3,\n \n    // Suspended account (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}\n\n// Return list of AccountStatusCode values and their display names\nexport function GetAccountStatusCodes() : Map<AccountStatusCode, string> {\n\n    let result = new Map<AccountStatusCode, string>();\n\n    \n    result.set(AccountStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(AccountStatusCode.ACTIVE, 'Active');\n    \n    result.set(AccountStatusCode.INACTIVE, 'Inactive');\n    \n    result.set(AccountStatusCode.BLOCKED, 'Blocked');\n    \n    result.set(AccountStatusCode.SUSPENDED, 'Suspended');\n    \n\n    return result;\n}\n","\n\n// CampaignStatusCode represents the campaign status: PLANNING | ACTIVE | COMPLETED ...\nexport enum CampaignStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Planned campaign [1] \n    PLANNING = 1,\n \n    // Active campaign [2] \n    ACTIVE = 2,\n \n    // `Completed campaign [3] \n    COMPLETED = 3,\n \n    // Suspended (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}\n\n// Return list of CampaignStatusCode values and their display names\nexport function GetCampaignStatusCodes() : Map<CampaignStatusCode, string> {\n\n    let result = new Map<CampaignStatusCode, string>();\n\n    \n    result.set(CampaignStatusCode.UNDEFINED, 'Undefined');\n    \n    result.set(CampaignStatusCode.PLANNING, 'Planning');\n    \n    result.set(CampaignStatusCode.ACTIVE, 'Active');\n    \n    result.set(CampaignStatusCode.COMPLETED, 'Completed');\n    \n    result.set(CampaignStatusCode.SUSPENDED, 'Suspended');\n    \n\n    return result;\n}\n","\n\n// CampaignTypeCode represents the campaign type: WEB | EMAIL | TELESALES\nexport enum CampaignTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Web [1] \n    WEB = 1,\n \n    // Mail [2] \n    EMAIL = 2,\n \n    // Telephone Sales [3] \n    TELESALES = 3,\n \n}\n\n// Return list of CampaignTypeCode values and their display names\nexport function GetCampaignTypeCodes() : Map<CampaignTypeCode, string> {\n\n    let result = new Map<CampaignTypeCode, string>();\n\n    \n    result.set(CampaignTypeCode.UNDEFINED, 'Undefined');\n    \n    result.set(CampaignTypeCode.WEB, 'Web');\n    \n    result.set(CampaignTypeCode.EMAIL, 'Email');\n    \n    result.set(CampaignTypeCode.TELESALES, 'Telesales');\n    \n\n    return result;\n}\n","\n// BaseRestResponse is a common structure for all response types\nexport class BaseRestResponse {\n\n    // Error code (0 for success)\n    public code: number = 0;\n\n    // Error message\n    public error: string = '';\n}","import { BaseRestResponse } from './BaseRestResponse'\n\n// ActionResponse message is returned for any action on entity with no return data (e.d. delete)\nexport class ActionResponse extends BaseRestResponse {\n\n    // Entity key\n    public key: string = '';\n\n    // Additional data\n    public data: string = '';\n}\n\n\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntityResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public entity: T;\n}\n","import { BaseRestResponse } from './BaseRestResponse'\n\n// EntitiesResponse message is returned for any action returning multiple entities\nexport class EntitiesResponse<T> extends BaseRestResponse {\n\n    // Current page (Bulk) number\n    public page: number = 0;\n\n    // Size of page (items in bulk)\n    public size: number = 0;\n\n    // Total number of pages\n    public pages: number = 0;\n\n    // Total number of items in the query\n    public total: number = 0;\n\n    // List of entities\n    public list: T[] = [];\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json',\n    'Cache-Control': 'no-cache, no-store',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, accept, origin, Cache-Control, X-Requested-With, Authorization, Content-Disposition, Content-Filename',\n    'Access-Control-Exposed-Headers': 'X-API-KEY, X-ACCESS-TOKEN, X-TIMEZONE, Content-Disposition, Content-Filename',\n  })\n};\n\n\n// Utility class for all REST services with common functions\n@Injectable()\nexport class RestUtil {\n\n  // Constructor with injected authentication service\n  constructor(private http: HttpClient) { }\n\n  // Upload is HTTP POST action but the body is File object\n  upload<T>(file: File, url: string, ...params: string[]) {\n\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    const formData: FormData = new FormData();\n    formData.append('fileKey', file, file.name);\n\n    const req = new HttpRequest('POST', resourceUrl, formData, {\n      reportProgress: false,\n      responseType: 'json',\n    });\n    return this.http.request<T>(req);\n    //return this.http.request(req);\n  }\n\n  // Download is HTTP GET action but the content is blob\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = this.getMimeType(downloadLink);\n\n    return this.http.get(resourceUrl, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events',\n      headers: new HttpHeaders({ 'Content-Type': contentType })\n    });\n  }\n\n  // Download2 is an alternative option to download\n  download2(fileName: string, url: string, ...params: string[]) {\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    let contentType = this.getMimeType(fileName);\n\n    const link = document.createElement('a');\n    link.href = this.buildUrl(url, ...params);\n    link.download = downloadLink;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n  }\n\n  // HTTP GET action\n  get<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.get<T>(resourceUrl, httpOptions)\n  }\n\n  // HTTP POST action\n  post<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.post<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP PUT action\n  put<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.put<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP PATCH action\n  patch<T>(url: string, body?: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.patch<T>(resourceUrl, body, httpOptions)\n  }\n\n  // HTTP DELETE action\n  delete<T>(url: string, ...params: string[]): Observable<T> {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http.delete<T>(resourceUrl, httpOptions)\n  }\n\n  // Construct URL with parameters\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  // Return MIME type based on file extension\n  private getMimeType(fileName: string): string {\n    // Set content type for: json / csv / xml / pdf /xslx\n    let contentType = 'application/json';\n    if (fileName.toLowerCase().endsWith('csv')) {\n      contentType = 'text/csv';\n    } else if (fileName.toLowerCase().endsWith('xml')) {\n      contentType = 'text/xml';\n    } else if (fileName.toLowerCase().endsWith('pdf')) {\n      contentType = 'application/pdf';\n    } else if (fileName.toLowerCase().endsWith('xlsx')) {\n      contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    }\n    return contentType\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class GooxConfig {\n    api: string = '';\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { Document } from '.';\n\n\n\n// DocumentsEndPoint Services for documents actions \n// @Path: /v1/documents \n@Injectable()\nexport class DocumentsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new document\n   */\n  create(body?: Document) {\n    return this.rest.post<EntityResponse<Document>>(`${this.baseUrl}/v1/documents`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing document\n   */\n  update(body?: Document) {\n    return this.rest.put<EntityResponse<Document>>(`${this.baseUrl}/v1/documents`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete document and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/documents`);\n  }\n\n  /**\n   * Get a single document by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Document>>(`${this.baseUrl}/v1/documents`);\n  }\n\n  /**\n   * Find documents by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Document>>(`${this.baseUrl}/v1/documents`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { Lead } from '.';\n\n\n\n// LeadsEndPoint Services for leads actions \n// @Path: /v1/leads \n@Injectable()\nexport class LeadsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new lead\n   */\n  create(body?: Lead) {\n    return this.rest.post<EntityResponse<Lead>>(`${this.baseUrl}/v1/leads`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing lead\n   */\n  update(body?: Lead) {\n    return this.rest.put<EntityResponse<Lead>>(`${this.baseUrl}/v1/leads`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete lead and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/leads`);\n  }\n\n  /**\n   * Get a single lead by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Lead>>(`${this.baseUrl}/v1/leads`);\n  }\n\n  /**\n   * Find leads by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Lead>>(`${this.baseUrl}/v1/leads`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\n\n\n\n// UserEndPoint Services for user registration and login \n// @Path: /v1/user \n@Injectable()\nexport class UserEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Authorize user, verify user against account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   */\n  authorize(body?: string) {\n    return this.rest.post<ActionResponse>(`${this.baseUrl}/user/authorize`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { User } from '.';\n\n\n\n// UsersEndPoint Services for users actions \n// @Path: /v1/users \n@Injectable()\nexport class UsersEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new user\n   */\n  create(body?: User) {\n    return this.rest.post<EntityResponse<User>>(`${this.baseUrl}/v1/users`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing user\n   */\n  update(body?: User) {\n    return this.rest.put<EntityResponse<User>>(`${this.baseUrl}/v1/users`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete user and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/users`);\n  }\n\n  /**\n   * Get a single user by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<User>>(`${this.baseUrl}/v1/users`);\n  }\n\n  /**\n   * Find users by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<User>>(`${this.baseUrl}/v1/users`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { Account } from '.';\n\n\n\n// AccountsEndPoint Services for user registration and login \n// @Path: /v1/accounts \n@Injectable()\nexport class AccountsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   */\n  create(body?: Account) {\n    return this.rest.post<EntityResponse<Account>>(`${this.baseUrl}/v1/accounts`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account\n   */\n  update(body?: Account) {\n    return this.rest.put<EntityResponse<Account>>(`${this.baseUrl}/v1/sys/accounts`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/sys/accounts`);\n  }\n\n  /**\n   * Get a single account by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Account>>(`${this.baseUrl}/v1/sys/accounts`);\n  }\n\n  /**\n   * Find accounts by query\n   */\n  find(search?: string, status?: [], sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Account>>(`${this.baseUrl}/v1/sys/accounts`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { AuditLog } from '.';\n\n\n\n// AuditLogsEndPoint Services for auditLogs actions \n// @Path: /v1/audit_logs \n@Injectable()\nexport class AuditLogsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new auditLog\n   */\n  create(body?: AuditLog) {\n    return this.rest.post<EntityResponse<AuditLog>>(`${this.baseUrl}/v1/audit_logs`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get a single auditLog by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<AuditLog>>(`${this.baseUrl}/v1/audit_logs`);\n  }\n\n  /**\n   * Find auditLogs by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<AuditLog>>(`${this.baseUrl}/v1/audit_logs`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { Campaign } from '.';\n\n\n\n// CampaignsEndPoint Services for campaigns actions \n// @Path: /v1/campaigns \n@Injectable()\nexport class CampaignsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new campaign\n   */\n  create(body?: Campaign) {\n    return this.rest.post<EntityResponse<Campaign>>(`${this.baseUrl}/v1/campaigns`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing campaign\n   */\n  update(body?: Campaign) {\n    return this.rest.put<EntityResponse<Campaign>>(`${this.baseUrl}/v1/campaigns`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete campaign and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/campaigns`);\n  }\n\n  /**\n   * Get a single campaign by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Campaign>>(`${this.baseUrl}/v1/campaigns`);\n  }\n\n  /**\n   * Find campaigns by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Campaign>>(`${this.baseUrl}/v1/campaigns`, ...params);\n  }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { RestUtil, EntityResponse, EntitiesResponse, ActionResponse } from '../utils';\nimport { GooxConfig } from '../config';\n\nimport { Contact } from '.';\n\n\n\n// ContactsEndPoint Services for contacts actions \n// @Path: /v1/contacts \n@Injectable()\nexport class ContactsEndPoint {\n\n  // URL to web api\n  private baseUrl = '';\n\n  // Class constructor\n  constructor(@Inject('config') private config: GooxConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new contact\n   */\n  create(body?: Contact) {\n    return this.rest.post<EntityResponse<Contact>>(`${this.baseUrl}/v1/contacts`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing contact\n   */\n  update(body?: Contact) {\n    return this.rest.put<EntityResponse<Contact>>(`${this.baseUrl}/v1/contacts`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete contact and all its content\n   */\n  delete(id?: string) {\n    return this.rest.delete<ActionResponse>(`${this.baseUrl}/v1/contacts`);\n  }\n\n  /**\n   * Get a single contact by id\n   */\n  get(id?: string) {\n    return this.rest.get<EntityResponse<Contact>>(`${this.baseUrl}/v1/contacts`);\n  }\n\n  /**\n   * Find contacts by query\n   */\n  find(search?: string, sort?: string, page?: number, size?: number) {\n    const params = [];\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (size != null) { params.push(`size=${size}`); }\n\n\t\treturn this.rest.get<EntitiesResponse<Contact>>(`${this.baseUrl}/v1/contacts`, ...params);\n  }\n\n}\n","\nimport { ContactsEndPoint } from '.';\nimport { DocumentsEndPoint } from '.';\nimport { LeadsEndPoint } from '.';\nimport { UserEndPoint } from '.';\nimport { UsersEndPoint } from '.';\nimport { AccountsEndPoint } from '.';\nimport { AuditLogsEndPoint } from '.';\nimport { CampaignsEndPoint } from '.';\n\nexport const Services = [\n    ContactsEndPoint,\n    DocumentsEndPoint,\n    LeadsEndPoint,\n    UserEndPoint,\n    UsersEndPoint,\n    AccountsEndPoint,\n    AuditLogsEndPoint,\n    CampaignsEndPoint,\n    \n]\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Services } from './lib/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { GooxConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class NgxGooxLibModule {\n  static forRoot(config: GooxConfig): ModuleWithProviders<NgxGooxLibModule> {\n    return {\n      ngModule: NgxGooxLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n\n","/*\n * Public API Surface of ngx-goox-lib\n */\n\nexport * from './ngx-goox-lib.module';\nexport * from './lib';\nexport * from './utils';\nexport * from './config';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.RestUtil"],"mappings":"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"}