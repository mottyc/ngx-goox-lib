import { Tuple } from '.';
// AssessmentCode represents the assessment score: EXCELLENT | SATISFACTORY | INCOMPLETE ...
export var AssessmentCode;
(function (AssessmentCode) {
    // Undefined [0] 
    AssessmentCode[AssessmentCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Excellent [1] 
    AssessmentCode[AssessmentCode["EXCELLENT"] = 1] = "EXCELLENT";
    // Satisfactory [2] 
    AssessmentCode[AssessmentCode["SATISFACTORY"] = 2] = "SATISFACTORY";
    // Below Average [3] 
    AssessmentCode[AssessmentCode["BELOW_AVERAGE"] = 3] = "BELOW_AVERAGE";
    // Unsatisfactory [4] 
    AssessmentCode[AssessmentCode["UNSATISFACTORY"] = 4] = "UNSATISFACTORY";
    // Incomplete [5] 
    AssessmentCode[AssessmentCode["INCOMPLETE"] = 5] = "INCOMPLETE";
    // Repeat exercise is required [6] 
    AssessmentCode[AssessmentCode["REPEAT"] = 6] = "REPEAT";
    // Demonstration only [7] 
    AssessmentCode[AssessmentCode["DEMO"] = 7] = "DEMO";
})(AssessmentCode || (AssessmentCode = {}));
// Return list of AssessmentCode values and their display names
export function GetAssessmentCodes() {
    let result = [];
    result.push(new Tuple(AssessmentCode.EXCELLENT, 'AssessmentCode.EXCELLENT'));
    result.push(new Tuple(AssessmentCode.SATISFACTORY, 'AssessmentCode.SATISFACTORY'));
    result.push(new Tuple(AssessmentCode.BELOW_AVERAGE, 'AssessmentCode.BELOW_AVERAGE'));
    result.push(new Tuple(AssessmentCode.UNSATISFACTORY, 'AssessmentCode.UNSATISFACTORY'));
    result.push(new Tuple(AssessmentCode.INCOMPLETE, 'AssessmentCode.INCOMPLETE'));
    result.push(new Tuple(AssessmentCode.REPEAT, 'AssessmentCode.REPEAT'));
    result.push(new Tuple(AssessmentCode.DEMO, 'AssessmentCode.DEMO'));
    return result;
}
// Return map of AssessmentCode values and their display names
export function MapAssessmentCodes() {
    let result = new Map();
    result.set(AssessmentCode.UNDEFINED, 'Undefined');
    result.set(AssessmentCode.EXCELLENT, 'Excellent');
    result.set(AssessmentCode.SATISFACTORY, 'Satisfactory');
    result.set(AssessmentCode.BELOW_AVERAGE, 'Below Average');
    result.set(AssessmentCode.UNSATISFACTORY, 'Unsatisfactory');
    result.set(AssessmentCode.INCOMPLETE, 'Incomplete');
    result.set(AssessmentCode.REPEAT, 'Repeat');
    result.set(AssessmentCode.DEMO, 'Demo');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXNzbWVudENvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9Bc3Nlc3NtZW50Q29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLDRGQUE0RjtBQUM1RixNQUFNLENBQU4sSUFBWSxjQTBCWDtBQTFCRCxXQUFZLGNBQWM7SUFFdEIsaUJBQWlCO0lBQ2pCLDZEQUFhLENBQUE7SUFFYixpQkFBaUI7SUFDakIsNkRBQWEsQ0FBQTtJQUViLG9CQUFvQjtJQUNwQixtRUFBZ0IsQ0FBQTtJQUVoQixxQkFBcUI7SUFDckIscUVBQWlCLENBQUE7SUFFakIsc0JBQXNCO0lBQ3RCLHVFQUFrQixDQUFBO0lBRWxCLGtCQUFrQjtJQUNsQiwrREFBYyxDQUFBO0lBRWQsbUNBQW1DO0lBQ25DLHVEQUFVLENBQUE7SUFFViwwQkFBMEI7SUFDMUIsbURBQVEsQ0FBQTtBQUVaLENBQUMsRUExQlcsY0FBYyxLQUFkLGNBQWMsUUEwQnpCO0FBRUQsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxrQkFBa0I7SUFDakMsSUFBSSxNQUFNLEdBQXFDLEVBQUUsQ0FBQztJQUdsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLENBQUMsQ0FBQTtJQUVwRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsWUFBWSxFQUFFLDZCQUE2QixDQUFDLENBQUMsQ0FBQTtJQUUxRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsYUFBYSxFQUFFLDhCQUE4QixDQUFDLENBQUMsQ0FBQTtJQUU1RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsY0FBYyxFQUFFLCtCQUErQixDQUFDLENBQUMsQ0FBQTtJQUU5RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsVUFBVSxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUV0RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsTUFBTSxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtJQUU5RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQTtJQUd2RixPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsOERBQThEO0FBQzlELE1BQU0sVUFBVSxrQkFBa0I7SUFDOUIsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7SUFHbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRTFELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTVELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBR3JDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFR1cGxlIH0gZnJvbSAnLic7XG5cblxuLy8gQXNzZXNzbWVudENvZGUgcmVwcmVzZW50cyB0aGUgYXNzZXNzbWVudCBzY29yZTogRVhDRUxMRU5UIHwgU0FUSVNGQUNUT1JZIHwgSU5DT01QTEVURSAuLi5cbmV4cG9ydCBlbnVtIEFzc2Vzc21lbnRDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gRXhjZWxsZW50IFsxXSBcbiAgICBFWENFTExFTlQgPSAxLFxuIFxuICAgIC8vIFNhdGlzZmFjdG9yeSBbMl0gXG4gICAgU0FUSVNGQUNUT1JZID0gMixcbiBcbiAgICAvLyBCZWxvdyBBdmVyYWdlIFszXSBcbiAgICBCRUxPV19BVkVSQUdFID0gMyxcbiBcbiAgICAvLyBVbnNhdGlzZmFjdG9yeSBbNF0gXG4gICAgVU5TQVRJU0ZBQ1RPUlkgPSA0LFxuIFxuICAgIC8vIEluY29tcGxldGUgWzVdIFxuICAgIElOQ09NUExFVEUgPSA1LFxuIFxuICAgIC8vIFJlcGVhdCBleGVyY2lzZSBpcyByZXF1aXJlZCBbNl0gXG4gICAgUkVQRUFUID0gNixcbiBcbiAgICAvLyBEZW1vbnN0cmF0aW9uIG9ubHkgWzddIFxuICAgIERFTU8gPSA3LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBBc3Nlc3NtZW50Q29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXRBc3Nlc3NtZW50Q29kZXMoKSA6IFR1cGxlPEFzc2Vzc21lbnRDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8QXNzZXNzbWVudENvZGUsIHN0cmluZz5bXSA9IFtdO1xuXG4gICAgXG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxBc3Nlc3NtZW50Q29kZSwgc3RyaW5nPihBc3Nlc3NtZW50Q29kZS5FWENFTExFTlQsICdBc3Nlc3NtZW50Q29kZS5FWENFTExFTlQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxBc3Nlc3NtZW50Q29kZSwgc3RyaW5nPihBc3Nlc3NtZW50Q29kZS5TQVRJU0ZBQ1RPUlksICdBc3Nlc3NtZW50Q29kZS5TQVRJU0ZBQ1RPUlknKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxBc3Nlc3NtZW50Q29kZSwgc3RyaW5nPihBc3Nlc3NtZW50Q29kZS5CRUxPV19BVkVSQUdFLCAnQXNzZXNzbWVudENvZGUuQkVMT1dfQVZFUkFHRScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFzc2Vzc21lbnRDb2RlLCBzdHJpbmc+KEFzc2Vzc21lbnRDb2RlLlVOU0FUSVNGQUNUT1JZLCAnQXNzZXNzbWVudENvZGUuVU5TQVRJU0ZBQ1RPUlknKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxBc3Nlc3NtZW50Q29kZSwgc3RyaW5nPihBc3Nlc3NtZW50Q29kZS5JTkNPTVBMRVRFLCAnQXNzZXNzbWVudENvZGUuSU5DT01QTEVURScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFzc2Vzc21lbnRDb2RlLCBzdHJpbmc+KEFzc2Vzc21lbnRDb2RlLlJFUEVBVCwgJ0Fzc2Vzc21lbnRDb2RlLlJFUEVBVCcpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFzc2Vzc21lbnRDb2RlLCBzdHJpbmc+KEFzc2Vzc21lbnRDb2RlLkRFTU8sICdBc3Nlc3NtZW50Q29kZS5ERU1PJykpXG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUmV0dXJuIG1hcCBvZiBBc3Nlc3NtZW50Q29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBBc3Nlc3NtZW50Q29kZXMoKSA6IE1hcDxBc3Nlc3NtZW50Q29kZSwgc3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8QXNzZXNzbWVudENvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KEFzc2Vzc21lbnRDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuXHRcblx0cmVzdWx0LnNldChBc3Nlc3NtZW50Q29kZS5FWENFTExFTlQsICdFeGNlbGxlbnQnKTtcblx0XG5cdHJlc3VsdC5zZXQoQXNzZXNzbWVudENvZGUuU0FUSVNGQUNUT1JZLCAnU2F0aXNmYWN0b3J5Jyk7XG5cdFxuXHRyZXN1bHQuc2V0KEFzc2Vzc21lbnRDb2RlLkJFTE9XX0FWRVJBR0UsICdCZWxvdyBBdmVyYWdlJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEFzc2Vzc21lbnRDb2RlLlVOU0FUSVNGQUNUT1JZLCAnVW5zYXRpc2ZhY3RvcnknKTtcblx0XG5cdHJlc3VsdC5zZXQoQXNzZXNzbWVudENvZGUuSU5DT01QTEVURSwgJ0luY29tcGxldGUnKTtcblx0XG5cdHJlc3VsdC5zZXQoQXNzZXNzbWVudENvZGUuUkVQRUFULCAnUmVwZWF0Jyk7XG5cdFxuXHRyZXN1bHQuc2V0KEFzc2Vzc21lbnRDb2RlLkRFTU8sICdEZW1vJyk7XG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==