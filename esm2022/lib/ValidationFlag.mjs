import { Tuple } from '.';
// ValidationFlag represents combination of validations
export var ValidationFlag;
(function (ValidationFlag) {
    // Undefined [0] 
    ValidationFlag[ValidationFlag["UNDEFINED"] = 0] = "UNDEFINED";
    // Valid medical certificate  [1] 
    ValidationFlag[ValidationFlag["MEDICAL_CERT"] = 1] = "MEDICAL_CERT";
    // Valid pilot license [2] 
    ValidationFlag[ValidationFlag["PILOT_LICENSE"] = 2] = "PILOT_LICENSE";
    // Single Engine Certificate [4] 
    ValidationFlag[ValidationFlag["SINGLE_ENG_CERT"] = 4] = "SINGLE_ENG_CERT";
    // Dual Engine Certificate [8] 
    ValidationFlag[ValidationFlag["DUAL_ENG_CERT"] = 8] = "DUAL_ENG_CERT";
    // 666 Instruments Certificate [16] 
    ValidationFlag[ValidationFlag["INST_666_CERT"] = 16] = "INST_666_CERT";
    // REC Instruments Certificate [32] 
    ValidationFlag[ValidationFlag["INST_REC_CERT"] = 32] = "INST_REC_CERT";
    // Day time fly [64] 
    ValidationFlag[ValidationFlag["DAYTIME_FLY"] = 64] = "DAYTIME_FLY";
    // Nighttime fly [128] 
    ValidationFlag[ValidationFlag["NIGHTTIME_FLY"] = 128] = "NIGHTTIME_FLY";
    // Night CVFR [256] 
    ValidationFlag[ValidationFlag["NIGHT_CVFR_CUR"] = 256] = "NIGHT_CVFR_CUR";
    // Route exam [512] 
    ValidationFlag[ValidationFlag["ROUTE_EXAM"] = 512] = "ROUTE_EXAM";
    // DI Certificate [1024] 
    ValidationFlag[ValidationFlag["DI_CERT"] = 1024] = "DI_CERT";
    // International [2048] 
    ValidationFlag[ValidationFlag["INTERNATIONAL"] = 2048] = "INTERNATIONAL";
    // English Proficiency [4096] 
    ValidationFlag[ValidationFlag["ENGLISH_PROF"] = 4096] = "ENGLISH_PROF";
    // Instructor license [8192] 
    ValidationFlag[ValidationFlag["INSTRUCTOR_LICENSE"] = 8192] = "INSTRUCTOR_LICENSE";
    // Company check ? [16384] 
    ValidationFlag[ValidationFlag["COMPANY_CHECK"] = 16384] = "COMPANY_CHECK";
    // Company Examiner ? [32768] 
    ValidationFlag[ValidationFlag["COMPANY_EXAMIN"] = 32768] = "COMPANY_EXAMIN";
    // Commercial 172p [65536] 
    ValidationFlag[ValidationFlag["COMMERCIAL_172P"] = 65536] = "COMMERCIAL_172P";
    // Commercial 172xp [131072] 
    ValidationFlag[ValidationFlag["COMMERCIAL_172XP"] = 131072] = "COMMERCIAL_172XP";
    // Commercial 172xp [262144] 
    ValidationFlag[ValidationFlag["COMMERCIAL_207"] = 262144] = "COMMERCIAL_207";
})(ValidationFlag || (ValidationFlag = {}));
// Return list of ValidationFlag values and their display names
export function GetValidationFlags() {
    let result = [];
    result.push(new Tuple(ValidationFlag.MEDICAL_CERT, 'ValidationFlag.MEDICAL_CERT'));
    result.push(new Tuple(ValidationFlag.PILOT_LICENSE, 'ValidationFlag.PILOT_LICENSE'));
    result.push(new Tuple(ValidationFlag.SINGLE_ENG_CERT, 'ValidationFlag.SINGLE_ENG_CERT'));
    result.push(new Tuple(ValidationFlag.DUAL_ENG_CERT, 'ValidationFlag.DUAL_ENG_CERT'));
    result.push(new Tuple(ValidationFlag.INST_666_CERT, 'ValidationFlag.INST_666_CERT'));
    result.push(new Tuple(ValidationFlag.INST_REC_CERT, 'ValidationFlag.INST_REC_CERT'));
    result.push(new Tuple(ValidationFlag.DAYTIME_FLY, 'ValidationFlag.DAYTIME_FLY'));
    result.push(new Tuple(ValidationFlag.NIGHTTIME_FLY, 'ValidationFlag.NIGHTTIME_FLY'));
    result.push(new Tuple(ValidationFlag.NIGHT_CVFR_CUR, 'ValidationFlag.NIGHT_CVFR_CUR'));
    result.push(new Tuple(ValidationFlag.ROUTE_EXAM, 'ValidationFlag.ROUTE_EXAM'));
    result.push(new Tuple(ValidationFlag.DI_CERT, 'ValidationFlag.DI_CERT'));
    result.push(new Tuple(ValidationFlag.INTERNATIONAL, 'ValidationFlag.INTERNATIONAL'));
    result.push(new Tuple(ValidationFlag.ENGLISH_PROF, 'ValidationFlag.ENGLISH_PROF'));
    result.push(new Tuple(ValidationFlag.INSTRUCTOR_LICENSE, 'ValidationFlag.INSTRUCTOR_LICENSE'));
    result.push(new Tuple(ValidationFlag.COMPANY_CHECK, 'ValidationFlag.COMPANY_CHECK'));
    result.push(new Tuple(ValidationFlag.COMPANY_EXAMIN, 'ValidationFlag.COMPANY_EXAMIN'));
    result.push(new Tuple(ValidationFlag.COMMERCIAL_172P, 'ValidationFlag.COMMERCIAL_172P'));
    result.push(new Tuple(ValidationFlag.COMMERCIAL_172XP, 'ValidationFlag.COMMERCIAL_172XP'));
    result.push(new Tuple(ValidationFlag.COMMERCIAL_207, 'ValidationFlag.COMMERCIAL_207'));
    return result;
}
// Return map of ValidationFlag values and their display names
export function MapValidationFlags() {
    let result = new Map();
    result.set(ValidationFlag.UNDEFINED, 'Undefined');
    result.set(ValidationFlag.MEDICAL_CERT, 'Medical Cert');
    result.set(ValidationFlag.PILOT_LICENSE, 'Pilot License');
    result.set(ValidationFlag.SINGLE_ENG_CERT, 'Single Eng Cert');
    result.set(ValidationFlag.DUAL_ENG_CERT, 'Dual Eng Cert');
    result.set(ValidationFlag.INST_666_CERT, 'Inst 666 Cert');
    result.set(ValidationFlag.INST_REC_CERT, 'Inst Rec Cert');
    result.set(ValidationFlag.DAYTIME_FLY, 'Daytime Fly');
    result.set(ValidationFlag.NIGHTTIME_FLY, 'Nighttime Fly');
    result.set(ValidationFlag.NIGHT_CVFR_CUR, 'Night Cvfr Cur');
    result.set(ValidationFlag.ROUTE_EXAM, 'Route Exam');
    result.set(ValidationFlag.DI_CERT, 'Di Cert');
    result.set(ValidationFlag.INTERNATIONAL, 'International');
    result.set(ValidationFlag.ENGLISH_PROF, 'English Prof');
    result.set(ValidationFlag.INSTRUCTOR_LICENSE, 'Instructor License');
    result.set(ValidationFlag.COMPANY_CHECK, 'Company Check');
    result.set(ValidationFlag.COMPANY_EXAMIN, 'Company Examin');
    result.set(ValidationFlag.COMMERCIAL_172P, 'Commercial 172p');
    result.set(ValidationFlag.COMMERCIAL_172XP, 'Commercial 172xp');
    result.set(ValidationFlag.COMMERCIAL_207, 'Commercial 207');
    return result;
}
//# sourceMappingURL=data:application/json;base64,