import { ColumnDef } from '.';
import { BaseEntityEx } from '.';
// Lead entity is a lead in the CRM system
export class Lead extends BaseEntityEx {
    get(field) {
        if (!this.props) {
            return "";
        }
        let val = this.props.get(field);
        return String(val);
    }
}
export function GetLeadColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("firstName", "string", ""));
    result.push(new ColumnDef("lastName", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("phone", "string", ""));
    result.push(new ColumnDef("fax", "string", ""));
    result.push(new ColumnDef("mobile", "string", ""));
    result.push(new ColumnDef("email", "string", ""));
    result.push(new ColumnDef("primaryAddress", "Address", ""));
    result.push(new ColumnDef("leadSource", "string", ""));
    result.push(new ColumnDef("leadSourceDescription", "string", ""));
    result.push(new ColumnDef("campaignId", "string", ""));
    result.push(new ColumnDef("status", "LeadStatusCode", ""));
    result.push(new ColumnDef("referredBy", "string", ""));
    result.push(new ColumnDef("notes", "string", ""));
    result.push(new ColumnDef("assignedTo", "string", ""));
    result.push(new ColumnDef("price", "number", "decimal"));
    result.push(new ColumnDef("commission", "number", "decimal"));
    result.push(new ColumnDef("totalCost", "number", "decimal"));
    result.push(new ColumnDef("commissionPaid", "boolean", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL0xlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUc5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBSWpDLDBDQUEwQztBQUMxQyxNQUFNLE9BQU8sSUFBSyxTQUFRLFlBQVk7SUE4RHJDLEdBQUcsQ0FBQyxLQUFhO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBQ0QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUdEO0FBR0QsTUFBTSxVQUFVLGlCQUFpQjtJQUM3QixJQUFJLE1BQU0sR0FBaUIsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHNUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb2x1bW5EZWYgfSBmcm9tICcuJztcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuJztcbmltcG9ydCB7IExlYWRTdGF0dXNDb2RlIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBCYXNlRW50aXR5RXggfSBmcm9tICcuJztcblxuXG5cbi8vIExlYWQgZW50aXR5IGlzIGEgbGVhZCBpbiB0aGUgQ1JNIHN5c3RlbVxuZXhwb3J0IGNsYXNzIExlYWQgZXh0ZW5kcyBCYXNlRW50aXR5RXgge1xuIFxuICAgIC8vIEZpcnN0IG5hbWUgXG4gICAgcHVibGljIGZpcnN0TmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIExhc3QgbmFtZSBcbiAgICBwdWJsaWMgbGFzdE5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBBY2NvdW50IGRlc2NyaXB0aW9uIFxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIE9mZmljZSAvIExhbmRsaW5lIHBob25lIFxuICAgIHB1YmxpYyBwaG9uZTogc3RyaW5nO1xuIFxuICAgIC8vIE9mZmljZSAvIExhbmRsaW5lIGZheCBcbiAgICBwdWJsaWMgZmF4OiBzdHJpbmc7XG4gXG4gICAgLy8gTW9iaWxlIHBob25lIFxuICAgIHB1YmxpYyBtb2JpbGU6IHN0cmluZztcbiBcbiAgICAvLyBFbWFpbCBhZGRyZXNzIFxuICAgIHB1YmxpYyBlbWFpbDogc3RyaW5nO1xuIFxuICAgIC8vIFByaW1hcnkgYWRkcmVzcyBcbiAgICBwdWJsaWMgcHJpbWFyeUFkZHJlc3M6IEFkZHJlc3M7XG4gXG4gICAgLy8gTGVhZCBzb3VyY2UgXG4gICAgcHVibGljIGxlYWRTb3VyY2U6IHN0cmluZztcbiBcbiAgICAvLyBMZWFkIHNvdXJjZSBkZXNjcmlwdGlvbiBcbiAgICBwdWJsaWMgbGVhZFNvdXJjZURlc2NyaXB0aW9uOiBzdHJpbmc7XG4gXG4gICAgLy8gQ2FtcGFpZ24gSWQgXG4gICAgcHVibGljIGNhbXBhaWduSWQ6IHN0cmluZztcbiBcbiAgICAvLyBBY2NvdW50IHN0YXR1czogVU5ERUZJTkVEIHwgQUNUSVZFIHwgSU5BQ1RJVkUgfCBCTE9DS0VEIHwgU1VTUEVOREVEIFxuICAgIHB1YmxpYyBzdGF0dXM6IExlYWRTdGF0dXNDb2RlO1xuIFxuICAgIC8vIFJlZmVycmVkIGJ5IFxuICAgIHB1YmxpYyByZWZlcnJlZEJ5OiBzdHJpbmc7XG4gXG4gICAgLy8gTm90ZXMgXG4gICAgcHVibGljIG5vdGVzOiBzdHJpbmc7XG4gXG4gICAgLy8gQXNzaWduZWQgdG8gdXNlciBcbiAgICBwdWJsaWMgYXNzaWduZWRUbzogc3RyaW5nO1xuIFxuICAgIC8vIFxuICAgIHB1YmxpYyBwcmljZTogbnVtYmVyO1xuIFxuICAgIC8vIFxuICAgIHB1YmxpYyBjb21taXNzaW9uOiBudW1iZXI7XG4gXG4gICAgLy8gXG4gICAgcHVibGljIHRvdGFsQ29zdDogbnVtYmVyO1xuIFxuICAgIC8vIFxuICAgIHB1YmxpYyBjb21taXNzaW9uUGFpZDogYm9vbGVhbjtcbiBcbiBcblxuIFxuXHRnZXQoZmllbGQ6IHN0cmluZykgOiBhbnkge1xuXHRcdGlmICghdGhpcy5wcm9wcykge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdGxldCB2YWwgPSB0aGlzLnByb3BzLmdldChmaWVsZCk7XG5cdFx0cmV0dXJuIFN0cmluZyh2YWwpO1xuXHR9XG4gXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gR2V0TGVhZENvbHVtbnNEZWYoKSA6IENvbHVtbkRlZltdIHtcbiAgICBsZXQgcmVzdWx0IDogQ29sdW1uRGVmW10gPSBbXTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImlkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImNyZWF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInVwZGF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImZpcnN0TmFtZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsYXN0TmFtZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJkZXNjcmlwdGlvblwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwaG9uZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmYXhcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibW9iaWxlXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImVtYWlsXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInByaW1hcnlBZGRyZXNzXCIsIFwiQWRkcmVzc1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsZWFkU291cmNlXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxlYWRTb3VyY2VEZXNjcmlwdGlvblwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjYW1wYWlnbklkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInN0YXR1c1wiLCBcIkxlYWRTdGF0dXNDb2RlXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInJlZmVycmVkQnlcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibm90ZXNcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYXNzaWduZWRUb1wiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwcmljZVwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiY29tbWlzc2lvblwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidG90YWxDb3N0XCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjb21taXNzaW9uUGFpZFwiLCBcImJvb2xlYW5cIiwgXCJcIikpO1xuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19