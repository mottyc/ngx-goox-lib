import { BaseEntityEx } from '.';
import { ColumnDef } from '.';
// Lead entity is a lead in the CRM system
export class Lead extends BaseEntityEx {
    // Write dynamic props getter
    prop(field) {
        if (!this.props) {
            return "";
        }
        const val = this.props.get(field);
        return String(val);
    }
}
export function GetLeadColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("firstName", "string", ""));
    result.push(new ColumnDef("lastName", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("phone", "string", ""));
    result.push(new ColumnDef("fax", "string", ""));
    result.push(new ColumnDef("mobile", "string", ""));
    result.push(new ColumnDef("email", "string", ""));
    result.push(new ColumnDef("primaryAddress", "Address", ""));
    result.push(new ColumnDef("leadSource", "string", ""));
    result.push(new ColumnDef("leadSourceDescription", "string", ""));
    result.push(new ColumnDef("campaignId", "string", ""));
    result.push(new ColumnDef("status", "LeadStatusCode", ""));
    result.push(new ColumnDef("referredBy", "string", ""));
    result.push(new ColumnDef("notes", "string", ""));
    result.push(new ColumnDef("assignedTo", "string", ""));
    result.push(new ColumnDef("price", "number", "decimal"));
    result.push(new ColumnDef("commission", "number", "decimal"));
    result.push(new ColumnDef("totalCost", "number", "decimal"));
    result.push(new ColumnDef("commissionPaid", "boolean", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL0xlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBSTlCLDBDQUEwQztBQUMxQyxNQUFNLE9BQU8sSUFBSyxTQUFRLFlBQVk7SUE4RHJDLDZCQUE2QjtJQUN0QixJQUFJLENBQUMsS0FBYTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25CLENBQUM7Q0FHRDtBQUdELE1BQU0sVUFBVSxpQkFBaUI7SUFDN0IsSUFBSSxNQUFNLEdBQWlCLEVBQUUsQ0FBQztJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRzVELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4nO1xuaW1wb3J0IHsgTGVhZFN0YXR1c0NvZGUgfSBmcm9tICcuJztcbmltcG9ydCB7IEJhc2VFbnRpdHlFeCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQ29sdW1uRGVmIH0gZnJvbSAnLic7XG5cblxuXG4vLyBMZWFkIGVudGl0eSBpcyBhIGxlYWQgaW4gdGhlIENSTSBzeXN0ZW1cbmV4cG9ydCBjbGFzcyBMZWFkIGV4dGVuZHMgQmFzZUVudGl0eUV4IHtcbiBcbiAgICAvLyBGaXJzdCBuYW1lIFxuICAgIHB1YmxpYyBmaXJzdE5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBMYXN0IG5hbWUgXG4gICAgcHVibGljIGxhc3ROYW1lOiBzdHJpbmc7XG4gXG4gICAgLy8gQWNjb3VudCBkZXNjcmlwdGlvbiBcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiBcbiAgICAvLyBPZmZpY2UgLyBMYW5kbGluZSBwaG9uZSBcbiAgICBwdWJsaWMgcGhvbmU6IHN0cmluZztcbiBcbiAgICAvLyBPZmZpY2UgLyBMYW5kbGluZSBmYXggXG4gICAgcHVibGljIGZheDogc3RyaW5nO1xuIFxuICAgIC8vIE1vYmlsZSBwaG9uZSBcbiAgICBwdWJsaWMgbW9iaWxlOiBzdHJpbmc7XG4gXG4gICAgLy8gRW1haWwgYWRkcmVzcyBcbiAgICBwdWJsaWMgZW1haWw6IHN0cmluZztcbiBcbiAgICAvLyBQcmltYXJ5IGFkZHJlc3MgXG4gICAgcHVibGljIHByaW1hcnlBZGRyZXNzOiBBZGRyZXNzO1xuIFxuICAgIC8vIExlYWQgc291cmNlIFxuICAgIHB1YmxpYyBsZWFkU291cmNlOiBzdHJpbmc7XG4gXG4gICAgLy8gTGVhZCBzb3VyY2UgZGVzY3JpcHRpb24gXG4gICAgcHVibGljIGxlYWRTb3VyY2VEZXNjcmlwdGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIENhbXBhaWduIElkIFxuICAgIHB1YmxpYyBjYW1wYWlnbklkOiBzdHJpbmc7XG4gXG4gICAgLy8gQWNjb3VudCBzdGF0dXM6IFVOREVGSU5FRCB8IEFDVElWRSB8IElOQUNUSVZFIHwgQkxPQ0tFRCB8IFNVU1BFTkRFRCBcbiAgICBwdWJsaWMgc3RhdHVzOiBMZWFkU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBSZWZlcnJlZCBieSBcbiAgICBwdWJsaWMgcmVmZXJyZWRCeTogc3RyaW5nO1xuIFxuICAgIC8vIE5vdGVzIFxuICAgIHB1YmxpYyBub3Rlczogc3RyaW5nO1xuIFxuICAgIC8vIEFzc2lnbmVkIHRvIHVzZXIgXG4gICAgcHVibGljIGFzc2lnbmVkVG86IHN0cmluZztcbiBcbiAgICAvLyBcbiAgICBwdWJsaWMgcHJpY2U6IG51bWJlcjtcbiBcbiAgICAvLyBcbiAgICBwdWJsaWMgY29tbWlzc2lvbjogbnVtYmVyO1xuIFxuICAgIC8vIFxuICAgIHB1YmxpYyB0b3RhbENvc3Q6IG51bWJlcjtcbiBcbiAgICAvLyBcbiAgICBwdWJsaWMgY29tbWlzc2lvblBhaWQ6IGJvb2xlYW47XG4gXG4gXG5cbiBcblx0Ly8gV3JpdGUgZHluYW1pYyBwcm9wcyBnZXR0ZXJcblx0cHVibGljIHByb3AoZmllbGQ6IHN0cmluZykgOiBhbnkge1xuXHRcdGlmICghdGhpcy5wcm9wcykge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdGNvbnN0IHZhbCA9IHRoaXMucHJvcHMuZ2V0KGZpZWxkKVxuXHRcdHJldHVybiBTdHJpbmcodmFsKVxuXHR9XG4gXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gR2V0TGVhZENvbHVtbnNEZWYoKSA6IENvbHVtbkRlZltdIHtcbiAgICBsZXQgcmVzdWx0IDogQ29sdW1uRGVmW10gPSBbXTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImlkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImNyZWF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInVwZGF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImZpcnN0TmFtZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsYXN0TmFtZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJkZXNjcmlwdGlvblwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwaG9uZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmYXhcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibW9iaWxlXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImVtYWlsXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInByaW1hcnlBZGRyZXNzXCIsIFwiQWRkcmVzc1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsZWFkU291cmNlXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxlYWRTb3VyY2VEZXNjcmlwdGlvblwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjYW1wYWlnbklkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInN0YXR1c1wiLCBcIkxlYWRTdGF0dXNDb2RlXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInJlZmVycmVkQnlcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibm90ZXNcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYXNzaWduZWRUb1wiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwcmljZVwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiY29tbWlzc2lvblwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidG90YWxDb3N0XCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjb21taXNzaW9uUGFpZFwiLCBcImJvb2xlYW5cIiwgXCJcIikpO1xuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19