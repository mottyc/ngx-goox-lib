import { Tuple } from '.';
// LeadStatusCode represents the lead status: NEW | INPROCESS | ASSIGNED ...
export var LeadStatusCode;
(function (LeadStatusCode) {
    // Undefined [0] 
    LeadStatusCode[LeadStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // New Lead [1] 
    LeadStatusCode[LeadStatusCode["NEW"] = 1] = "NEW";
    // Lead in process [2] 
    LeadStatusCode[LeadStatusCode["INPROCESS"] = 2] = "INPROCESS";
    // Lead assigned [3] 
    LeadStatusCode[LeadStatusCode["ASSIGNED"] = 3] = "ASSIGNED";
    // Lead converted [4] 
    LeadStatusCode[LeadStatusCode["CONVERTED"] = 4] = "CONVERTED";
    // Lead irrelevant [5] 
    LeadStatusCode[LeadStatusCode["IRRELEVANT"] = 5] = "IRRELEVANT";
    // Lead redirected [6] 
    LeadStatusCode[LeadStatusCode["REDIRECTED"] = 6] = "REDIRECTED";
    // Lead recycled [7] 
    LeadStatusCode[LeadStatusCode["RECYCLED"] = 7] = "RECYCLED";
    // Lead is no longer exists [8] 
    LeadStatusCode[LeadStatusCode["DEAD"] = 8] = "DEAD";
})(LeadStatusCode || (LeadStatusCode = {}));
// Return list of LeadStatusCode values and their display names
export function GetLeadStatusCodes() {
    let result = [];
    result.push(new Tuple(LeadStatusCode.NEW, 'LeadStatusCode.NEW'));
    result.push(new Tuple(LeadStatusCode.INPROCESS, 'LeadStatusCode.INPROCESS'));
    result.push(new Tuple(LeadStatusCode.ASSIGNED, 'LeadStatusCode.ASSIGNED'));
    result.push(new Tuple(LeadStatusCode.CONVERTED, 'LeadStatusCode.CONVERTED'));
    result.push(new Tuple(LeadStatusCode.IRRELEVANT, 'LeadStatusCode.IRRELEVANT'));
    result.push(new Tuple(LeadStatusCode.REDIRECTED, 'LeadStatusCode.REDIRECTED'));
    result.push(new Tuple(LeadStatusCode.RECYCLED, 'LeadStatusCode.RECYCLED'));
    result.push(new Tuple(LeadStatusCode.DEAD, 'LeadStatusCode.DEAD'));
    return result;
}
// Return map of LeadStatusCode values and their display names
export function MapLeadStatusCodes() {
    let result = new Map();
    result.set(LeadStatusCode.UNDEFINED, 'Undefined');
    result.set(LeadStatusCode.NEW, 'New');
    result.set(LeadStatusCode.INPROCESS, 'Inprocess');
    result.set(LeadStatusCode.ASSIGNED, 'Assigned');
    result.set(LeadStatusCode.CONVERTED, 'Converted');
    result.set(LeadStatusCode.IRRELEVANT, 'Irrelevant');
    result.set(LeadStatusCode.REDIRECTED, 'Redirected');
    result.set(LeadStatusCode.RECYCLED, 'Recycled');
    result.set(LeadStatusCode.DEAD, 'Dead');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhZFN0YXR1c0NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9MZWFkU3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLDRFQUE0RTtBQUM1RSxNQUFNLENBQU4sSUFBWSxjQTZCWDtBQTdCRCxXQUFZLGNBQWM7SUFFdEIsaUJBQWlCO0lBQ2pCLDZEQUFhLENBQUE7SUFFYixnQkFBZ0I7SUFDaEIsaURBQU8sQ0FBQTtJQUVQLHVCQUF1QjtJQUN2Qiw2REFBYSxDQUFBO0lBRWIscUJBQXFCO0lBQ3JCLDJEQUFZLENBQUE7SUFFWixzQkFBc0I7SUFDdEIsNkRBQWEsQ0FBQTtJQUViLHVCQUF1QjtJQUN2QiwrREFBYyxDQUFBO0lBRWQsdUJBQXVCO0lBQ3ZCLCtEQUFjLENBQUE7SUFFZCxxQkFBcUI7SUFDckIsMkRBQVksQ0FBQTtJQUVaLGdDQUFnQztJQUNoQyxtREFBUSxDQUFBO0FBRVosQ0FBQyxFQTdCVyxjQUFjLEtBQWQsY0FBYyxRQTZCekI7QUFFRCwrREFBK0Q7QUFDL0QsTUFBTSxVQUFVLGtCQUFrQjtJQUNqQyxJQUFJLE1BQU0sR0FBcUMsRUFBRSxDQUFDO0lBR2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFBO0lBRXhGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBRXBHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxRQUFRLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFBO0lBRWxHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBRXBHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxVQUFVLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFBO0lBRXRHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxVQUFVLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFBO0lBRXRHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxRQUFRLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFBO0lBRWxHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFBO0lBR3ZGLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCw4REFBOEQ7QUFDOUQsTUFBTSxVQUFVLGtCQUFrQjtJQUM5QixJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztJQUdsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUdyQyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBUdXBsZSB9IGZyb20gJy4nO1xuXG5cbi8vIExlYWRTdGF0dXNDb2RlIHJlcHJlc2VudHMgdGhlIGxlYWQgc3RhdHVzOiBORVcgfCBJTlBST0NFU1MgfCBBU1NJR05FRCAuLi5cbmV4cG9ydCBlbnVtIExlYWRTdGF0dXNDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gTmV3IExlYWQgWzFdIFxuICAgIE5FVyA9IDEsXG4gXG4gICAgLy8gTGVhZCBpbiBwcm9jZXNzIFsyXSBcbiAgICBJTlBST0NFU1MgPSAyLFxuIFxuICAgIC8vIExlYWQgYXNzaWduZWQgWzNdIFxuICAgIEFTU0lHTkVEID0gMyxcbiBcbiAgICAvLyBMZWFkIGNvbnZlcnRlZCBbNF0gXG4gICAgQ09OVkVSVEVEID0gNCxcbiBcbiAgICAvLyBMZWFkIGlycmVsZXZhbnQgWzVdIFxuICAgIElSUkVMRVZBTlQgPSA1LFxuIFxuICAgIC8vIExlYWQgcmVkaXJlY3RlZCBbNl0gXG4gICAgUkVESVJFQ1RFRCA9IDYsXG4gXG4gICAgLy8gTGVhZCByZWN5Y2xlZCBbN10gXG4gICAgUkVDWUNMRUQgPSA3LFxuIFxuICAgIC8vIExlYWQgaXMgbm8gbG9uZ2VyIGV4aXN0cyBbOF0gXG4gICAgREVBRCA9IDgsXG4gXG59XG5cbi8vIFJldHVybiBsaXN0IG9mIExlYWRTdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldExlYWRTdGF0dXNDb2RlcygpIDogVHVwbGU8TGVhZFN0YXR1c0NvZGUsIHN0cmluZz5bXSB7XG5cdGxldCByZXN1bHQgOiBUdXBsZTxMZWFkU3RhdHVzQ29kZSwgc3RyaW5nPltdID0gW107XG5cbiAgICBcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPExlYWRTdGF0dXNDb2RlLCBzdHJpbmc+KExlYWRTdGF0dXNDb2RlLk5FVywgJ0xlYWRTdGF0dXNDb2RlLk5FVycpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPExlYWRTdGF0dXNDb2RlLCBzdHJpbmc+KExlYWRTdGF0dXNDb2RlLklOUFJPQ0VTUywgJ0xlYWRTdGF0dXNDb2RlLklOUFJPQ0VTUycpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPExlYWRTdGF0dXNDb2RlLCBzdHJpbmc+KExlYWRTdGF0dXNDb2RlLkFTU0lHTkVELCAnTGVhZFN0YXR1c0NvZGUuQVNTSUdORUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxMZWFkU3RhdHVzQ29kZSwgc3RyaW5nPihMZWFkU3RhdHVzQ29kZS5DT05WRVJURUQsICdMZWFkU3RhdHVzQ29kZS5DT05WRVJURUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxMZWFkU3RhdHVzQ29kZSwgc3RyaW5nPihMZWFkU3RhdHVzQ29kZS5JUlJFTEVWQU5ULCAnTGVhZFN0YXR1c0NvZGUuSVJSRUxFVkFOVCcpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPExlYWRTdGF0dXNDb2RlLCBzdHJpbmc+KExlYWRTdGF0dXNDb2RlLlJFRElSRUNURUQsICdMZWFkU3RhdHVzQ29kZS5SRURJUkVDVEVEJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8TGVhZFN0YXR1c0NvZGUsIHN0cmluZz4oTGVhZFN0YXR1c0NvZGUuUkVDWUNMRUQsICdMZWFkU3RhdHVzQ29kZS5SRUNZQ0xFRCcpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPExlYWRTdGF0dXNDb2RlLCBzdHJpbmc+KExlYWRTdGF0dXNDb2RlLkRFQUQsICdMZWFkU3RhdHVzQ29kZS5ERUFEJykpXG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUmV0dXJuIG1hcCBvZiBMZWFkU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBMZWFkU3RhdHVzQ29kZXMoKSA6IE1hcDxMZWFkU3RhdHVzQ29kZSwgc3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8TGVhZFN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KExlYWRTdGF0dXNDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuXHRcblx0cmVzdWx0LnNldChMZWFkU3RhdHVzQ29kZS5ORVcsICdOZXcnKTtcblx0XG5cdHJlc3VsdC5zZXQoTGVhZFN0YXR1c0NvZGUuSU5QUk9DRVNTLCAnSW5wcm9jZXNzJyk7XG5cdFxuXHRyZXN1bHQuc2V0KExlYWRTdGF0dXNDb2RlLkFTU0lHTkVELCAnQXNzaWduZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoTGVhZFN0YXR1c0NvZGUuQ09OVkVSVEVELCAnQ29udmVydGVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KExlYWRTdGF0dXNDb2RlLklSUkVMRVZBTlQsICdJcnJlbGV2YW50Jyk7XG5cdFxuXHRyZXN1bHQuc2V0KExlYWRTdGF0dXNDb2RlLlJFRElSRUNURUQsICdSZWRpcmVjdGVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KExlYWRTdGF0dXNDb2RlLlJFQ1lDTEVELCAnUmVjeWNsZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoTGVhZFN0YXR1c0NvZGUuREVBRCwgJ0RlYWQnKTtcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19