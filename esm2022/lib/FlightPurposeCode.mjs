import { Tuple } from '.';
// FlightPurposeCode represents a flight purpose:  GENERAL | PRIVATE | COMMERCIAL ...
export var FlightPurposeCode;
(function (FlightPurposeCode) {
    // Undefined [0] 
    FlightPurposeCode[FlightPurposeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Introductory Flight [1] 
    FlightPurposeCode[FlightPurposeCode["INTRODUCTORY"] = 1] = "INTRODUCTORY";
    // Flight Lesson [2] 
    FlightPurposeCode[FlightPurposeCode["FLIGHT_LESSON"] = 2] = "FLIGHT_LESSON";
    // Airplane Rental Flight [3] 
    FlightPurposeCode[FlightPurposeCode["RENTAL"] = 3] = "RENTAL";
    // Private Flight [4] 
    FlightPurposeCode[FlightPurposeCode["PRIVATE"] = 4] = "PRIVATE";
    // Vertical Photographic [5] 
    FlightPurposeCode[FlightPurposeCode["VERTICAL_PHOTO"] = 5] = "VERTICAL_PHOTO";
    // Diagonal Photographic [6] 
    FlightPurposeCode[FlightPurposeCode["DIAGONAL_PHOTO"] = 6] = "DIAGONAL_PHOTO";
    // Round Flight [7] 
    FlightPurposeCode[FlightPurposeCode["ROUND"] = 7] = "ROUND";
    // Initial / Recurrent CAA Test [8] 
    FlightPurposeCode[FlightPurposeCode["CAA_TEST"] = 8] = "CAA_TEST";
    // Transfer Flight (to transfer airplane) [9] 
    FlightPurposeCode[FlightPurposeCode["TRANSFER"] = 9] = "TRANSFER";
    // Commercial air taxi to transfer passengers [10] 
    FlightPurposeCode[FlightPurposeCode["AIR_TAXI"] = 10] = "AIR_TAXI";
    // Engine Running [11] 
    FlightPurposeCode[FlightPurposeCode["ENGINE_RUNNING"] = 11] = "ENGINE_RUNNING";
    // Other purpose (elaborate on next field) [12] 
    FlightPurposeCode[FlightPurposeCode["OTHER"] = 12] = "OTHER";
})(FlightPurposeCode || (FlightPurposeCode = {}));
// Return list of FlightPurposeCode values and their display names
export function GetFlightPurposeCodes() {
    let result = [];
    result.push(new Tuple(FlightPurposeCode.INTRODUCTORY, 'FlightPurposeCode.INTRODUCTORY'));
    result.push(new Tuple(FlightPurposeCode.FLIGHT_LESSON, 'FlightPurposeCode.FLIGHT_LESSON'));
    result.push(new Tuple(FlightPurposeCode.RENTAL, 'FlightPurposeCode.RENTAL'));
    result.push(new Tuple(FlightPurposeCode.PRIVATE, 'FlightPurposeCode.PRIVATE'));
    result.push(new Tuple(FlightPurposeCode.VERTICAL_PHOTO, 'FlightPurposeCode.VERTICAL_PHOTO'));
    result.push(new Tuple(FlightPurposeCode.DIAGONAL_PHOTO, 'FlightPurposeCode.DIAGONAL_PHOTO'));
    result.push(new Tuple(FlightPurposeCode.ROUND, 'FlightPurposeCode.ROUND'));
    result.push(new Tuple(FlightPurposeCode.CAA_TEST, 'FlightPurposeCode.CAA_TEST'));
    result.push(new Tuple(FlightPurposeCode.TRANSFER, 'FlightPurposeCode.TRANSFER'));
    result.push(new Tuple(FlightPurposeCode.AIR_TAXI, 'FlightPurposeCode.AIR_TAXI'));
    result.push(new Tuple(FlightPurposeCode.ENGINE_RUNNING, 'FlightPurposeCode.ENGINE_RUNNING'));
    result.push(new Tuple(FlightPurposeCode.OTHER, 'FlightPurposeCode.OTHER'));
    return result;
}
// Return map of FlightPurposeCode values and their display names
export function MapFlightPurposeCodes() {
    let result = new Map();
    result.set(FlightPurposeCode.UNDEFINED, 'Undefined');
    result.set(FlightPurposeCode.INTRODUCTORY, 'Introductory');
    result.set(FlightPurposeCode.FLIGHT_LESSON, 'Flight Lesson');
    result.set(FlightPurposeCode.RENTAL, 'Rental');
    result.set(FlightPurposeCode.PRIVATE, 'Private');
    result.set(FlightPurposeCode.VERTICAL_PHOTO, 'Vertical Photo');
    result.set(FlightPurposeCode.DIAGONAL_PHOTO, 'Diagonal Photo');
    result.set(FlightPurposeCode.ROUND, 'Round');
    result.set(FlightPurposeCode.CAA_TEST, 'Caa Test');
    result.set(FlightPurposeCode.TRANSFER, 'Transfer');
    result.set(FlightPurposeCode.AIR_TAXI, 'Air Taxi');
    result.set(FlightPurposeCode.ENGINE_RUNNING, 'Engine Running');
    result.set(FlightPurposeCode.OTHER, 'Other');
    return result;
}
//# sourceMappingURL=data:application/json;base64,