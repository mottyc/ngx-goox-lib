import { BaseEntityEx } from '.';
import { ColumnDef } from '.';
// Certificate entity is a contact certificate required for active pilot
export class Certificate extends BaseEntityEx {
}
export function GetCertificateColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("name", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("contactId", "string", ""));
    result.push(new ColumnDef("documentId", "string", ""));
    result.push(new ColumnDef("validUntil", "number", "datetime"));
    result.push(new ColumnDef("status", "StatusCode", ""));
    result.push(new ColumnDef("notifyAt", "number", "datetime"));
    result.push(new ColumnDef("subject", "string", ""));
    result.push(new ColumnDef("message", "string", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9DZXJ0aWZpY2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFJOUIsd0VBQXdFO0FBQ3hFLE1BQU0sT0FBTyxXQUFZLFNBQVEsWUFBWTtDQThCNUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCO0lBQ3BDLElBQUksTUFBTSxHQUFpQixFQUFFLENBQUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHcEQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBTdGF0dXNDb2RlIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBCYXNlRW50aXR5RXggfSBmcm9tICcuJztcbmltcG9ydCB7IENvbHVtbkRlZiB9IGZyb20gJy4nO1xuXG5cblxuLy8gQ2VydGlmaWNhdGUgZW50aXR5IGlzIGEgY29udGFjdCBjZXJ0aWZpY2F0ZSByZXF1aXJlZCBmb3IgYWN0aXZlIHBpbG90XG5leHBvcnQgY2xhc3MgQ2VydGlmaWNhdGUgZXh0ZW5kcyBCYXNlRW50aXR5RXgge1xuIFxuICAgIC8vIENlcnRpZmljYXRlIG5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBDZXJ0aWZpY2F0ZSBkZXNjcmlwdGlvbiBcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiBcbiAgICAvLyBMaW5rZWQgY29udGFjdCBJRCBcbiAgICBwdWJsaWMgY29udGFjdElkOiBzdHJpbmc7XG4gXG4gICAgLy8gTGlua2VkIGRvY3VtZW50IElEIFxuICAgIHB1YmxpYyBkb2N1bWVudElkOiBzdHJpbmc7XG4gXG4gICAgLy8gQ2VydGlmaWNhdGUgaXMgdmFsaWQgdW50aWwgdGhlIHRpbWVzdGFtcCBbZXBvY2ggdGltZSBtaWxsaXNlY29uZHNdIFxuICAgIHB1YmxpYyB2YWxpZFVudGlsOiBudW1iZXI7XG4gXG4gICAgLy8gQ2VydGlmaWNhdGUgd29ya2Zsb3cgc3RhdHVzOiBVTkRFRklORUQgfCBQRU5ESU5HIHwgSU5fUFJPQ0VTUyB8IENPTVBMRVRFRCAuLi4gXG4gICAgcHVibGljIHN0YXR1czogU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBUaW1lIG9mIG5vdGlmaWNhdGlvbiBzZW50IHRvIGNvbnRhY3QgW2Vwb2NoIHRpbWUgbWlsbGlzZWNvbmRzXSBcbiAgICBwdWJsaWMgbm90aWZ5QXQ6IG51bWJlcjtcbiBcbiAgICAvLyBOb3RpZmljYXRpb24gc3ViamVjdCBcbiAgICBwdWJsaWMgc3ViamVjdDogc3RyaW5nO1xuIFxuICAgIC8vIE5vdGlmaWNhdGlvbiBtZXNzYWdlIFxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG4gXG4gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRDZXJ0aWZpY2F0ZUNvbHVtbnNEZWYoKSA6IENvbHVtbkRlZltdIHtcbiAgICBsZXQgcmVzdWx0IDogQ29sdW1uRGVmW10gPSBbXTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImlkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImNyZWF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInVwZGF0ZWRPblwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm5hbWVcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZGVzY3JpcHRpb25cIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiY29udGFjdElkXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImRvY3VtZW50SWRcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidmFsaWRVbnRpbFwiLCBcIm51bWJlclwiLCBcImRhdGV0aW1lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInN0YXR1c1wiLCBcIlN0YXR1c0NvZGVcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibm90aWZ5QXRcIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJzdWJqZWN0XCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm1lc3NhZ2VcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19