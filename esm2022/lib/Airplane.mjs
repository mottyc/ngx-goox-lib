import { BaseEntity } from '.';
import { ColumnDef } from '.';
// Airplane entity represents an airplane
export class Airplane extends BaseEntity {
}
export function GetAirplaneColumnsDef() {
    let result = [];
    result.push(new ColumnDef("name", "string"));
    result.push(new ColumnDef("description", "string"));
    result.push(new ColumnDef("model", "string"));
    result.push(new ColumnDef("serialNo", "string"));
    result.push(new ColumnDef("status", "AirplaneStatusCode"));
    result.push(new ColumnDef("hobs", "number"));
    result.push(new ColumnDef("tach", "number"));
    result.push(new ColumnDef("nextTach", "number"));
    result.push(new ColumnDef("airTime", "number"));
    result.push(new ColumnDef("customerNo", "string"));
    result.push(new ColumnDef("airworthiness", "AirplaneValidationFlag"));
    result.push(new ColumnDef("fixedValueToFirstFlight", "number"));
    result.push(new ColumnDef("acTotalTime", "number"));
    result.push(new ColumnDef("engine", "Engine"));
    result.push(new ColumnDef("leftMagneto", "Magneto"));
    result.push(new ColumnDef("rightMagneto", "Magneto"));
    result.push(new ColumnDef("propeller", "Propeller"));
    result.push(new ColumnDef("fuel", "Fuel"));
    result.push(new ColumnDef("documents", "string"));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9BaXJwbGFuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFTOUIseUNBQXlDO0FBQ3pDLE1BQU0sT0FBTyxRQUFTLFNBQVEsVUFBVTtDQTREdkM7QUFFRCxNQUFNLFVBQVUscUJBQXFCO0lBQ2pDLElBQUksTUFBTSxHQUFpQixFQUFFLENBQUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsZUFBZSxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQztJQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLHlCQUF5QixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUdsRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEZ1ZWwgfSBmcm9tICcuJztcbmltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuJztcbmltcG9ydCB7IENvbHVtbkRlZiB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQWlycGxhbmVTdGF0dXNDb2RlIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBBaXJwbGFuZVZhbGlkYXRpb25GbGFnIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuJztcbmltcG9ydCB7IE1hZ25ldG8gfSBmcm9tICcuJztcbmltcG9ydCB7IFByb3BlbGxlciB9IGZyb20gJy4nO1xuXG5cblxuLy8gQWlycGxhbmUgZW50aXR5IHJlcHJlc2VudHMgYW4gYWlycGxhbmVcbmV4cG9ydCBjbGFzcyBBaXJwbGFuZSBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIE5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBEZXNjcmlwdGlvbiBcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiBcbiAgICAvLyBBaXJwbGFuZSBtb2RlbCBcbiAgICBwdWJsaWMgbW9kZWw6IHN0cmluZztcbiBcbiAgICAvLyBBaXJwbGFuZSBzZXJpYWwgbnVtYmVyIFxuICAgIHB1YmxpYyBzZXJpYWxObzogc3RyaW5nO1xuIFxuICAgIC8vIEFpcnBsYW5lIHN0YXR1cyBcbiAgICBwdWJsaWMgc3RhdHVzOiBBaXJwbGFuZVN0YXR1c0NvZGU7XG4gXG4gICAgLy8gQWlycGxhbmUgaG9icyBjb3VudGVyIFxuICAgIHB1YmxpYyBob2JzOiBudW1iZXI7XG4gXG4gICAgLy8gQWlycGxhbmUgdGFjaG9tZXRlciBjb3VudGVyIFxuICAgIHB1YmxpYyB0YWNoOiBudW1iZXI7XG4gXG4gICAgLy8gQWlycGxhbmUgbmV4dCB0YWNob21ldGVyIGZvciBpbnNwZWN0aW9uIFxuICAgIHB1YmxpYyBuZXh0VGFjaDogbnVtYmVyO1xuIFxuICAgIC8vIEFpcnBsYW5lIGFpciB0aW1lIChob3VycykgXG4gICAgcHVibGljIGFpclRpbWU6IG51bWJlcjtcbiBcbiAgICAvLyBBaXJwbGFuZSBjdXN0b21lciBudW1iZXIgXG4gICAgcHVibGljIGN1c3RvbWVyTm86IHN0cmluZztcbiBcbiAgICAvLyBBaXJ3b3J0aGluZXNzIGZsYWdzIFxuICAgIHB1YmxpYyBhaXJ3b3J0aGluZXNzOiBBaXJwbGFuZVZhbGlkYXRpb25GbGFnO1xuIFxuICAgIC8vIEZpeGVkIHZhbHVlIHRvIGZpcnN0IGZsaWdodCBcbiAgICBwdWJsaWMgZml4ZWRWYWx1ZVRvRmlyc3RGbGlnaHQ6IG51bWJlcjtcbiBcbiAgICAvLyBBQyB0b3RhbCB0aW1lIFxuICAgIHB1YmxpYyBhY1RvdGFsVGltZTogbnVtYmVyO1xuIFxuICAgIC8vIFNpbmdsZSAvIExlZnQgRW5naW5lIGluZGljYXRvcnMgXG4gICAgcHVibGljIGVuZ2luZTogRW5naW5lO1xuIFxuICAgIC8vIExlZnQgTWFnbmV0byBpbmRpY2F0b3JzIFxuICAgIHB1YmxpYyBsZWZ0TWFnbmV0bzogTWFnbmV0bztcbiBcbiAgICAvLyBSaWdodCBNYWduZXRvIGluZGljYXRvcnMgXG4gICAgcHVibGljIHJpZ2h0TWFnbmV0bzogTWFnbmV0bztcbiBcbiAgICAvLyBTaW5nbGUgLyBMZWZ0IFByb3BlbGxlciBpbmRpY2F0b3JzIFxuICAgIHB1YmxpYyBwcm9wZWxsZXI6IFByb3BlbGxlcjtcbiBcbiAgICAvLyBGdWVsIGluZGljYXRvcnMgXG4gICAgcHVibGljIGZ1ZWw6IEZ1ZWw7XG4gXG4gICAgLy8gQWlycGxhbmUgcmVsYXRlZCBkb2N1bWVudHMgXG4gICAgcHVibGljIGRvY3VtZW50czogc3RyaW5nW107XG4gXG4gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRBaXJwbGFuZUNvbHVtbnNEZWYoKSA6IENvbHVtbkRlZltdIHtcbiAgICBsZXQgcmVzdWx0IDogQ29sdW1uRGVmW10gPSBbXTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm5hbWVcIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZGVzY3JpcHRpb25cIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibW9kZWxcIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwic2VyaWFsTm9cIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwic3RhdHVzXCIsIFwiQWlycGxhbmVTdGF0dXNDb2RlXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImhvYnNcIiwgXCJudW1iZXJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidGFjaFwiLCBcIm51bWJlclwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJuZXh0VGFjaFwiLCBcIm51bWJlclwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhaXJUaW1lXCIsIFwibnVtYmVyXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImN1c3RvbWVyTm9cIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWlyd29ydGhpbmVzc1wiLCBcIkFpcnBsYW5lVmFsaWRhdGlvbkZsYWdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZml4ZWRWYWx1ZVRvRmlyc3RGbGlnaHRcIiwgXCJudW1iZXJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWNUb3RhbFRpbWVcIiwgXCJudW1iZXJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZW5naW5lXCIsIFwiRW5naW5lXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxlZnRNYWduZXRvXCIsIFwiTWFnbmV0b1wiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJyaWdodE1hZ25ldG9cIiwgXCJNYWduZXRvXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInByb3BlbGxlclwiLCBcIlByb3BlbGxlclwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmdWVsXCIsIFwiRnVlbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJkb2N1bWVudHNcIiwgXCJzdHJpbmdcIikpO1xuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19