import { BaseEntityEx } from '.';
import { ColumnDef } from '.';
// Airplane entity represents an airplane
export class Airplane extends BaseEntityEx {
    get(field) {
        if (!this.props) {
            return "";
        }
        let val = this.props.get(field);
        return String(val);
    }
}
export function GetAirplaneColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("name", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("model", "string", ""));
    result.push(new ColumnDef("serialNo", "string", ""));
    result.push(new ColumnDef("status", "AirplaneStatusCode", ""));
    result.push(new ColumnDef("hobs", "number", "decimal"));
    result.push(new ColumnDef("tach", "number", "decimal"));
    result.push(new ColumnDef("nextTach", "number", "decimal"));
    result.push(new ColumnDef("airTime", "number", "decimal"));
    result.push(new ColumnDef("customerNo", "string", ""));
    result.push(new ColumnDef("airworthiness", "AirplaneValidationFlag", ""));
    result.push(new ColumnDef("fixedValueToFirstFlight", "number", "decimal"));
    result.push(new ColumnDef("acTotalTime", "number", "decimal"));
    result.push(new ColumnDef("engine", "Engine", ""));
    result.push(new ColumnDef("leftMagneto", "Magneto", ""));
    result.push(new ColumnDef("rightMagneto", "Magneto", ""));
    result.push(new ColumnDef("propeller", "Propeller", ""));
    result.push(new ColumnDef("fuel", "Fuel", ""));
    result.push(new ColumnDef("documents", "string", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9BaXJwbGFuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFJOUIseUNBQXlDO0FBQ3pDLE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQThEekMsR0FBRyxDQUFDLEtBQWE7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixPQUFPLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFDRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBR0Q7QUFHRCxNQUFNLFVBQVUscUJBQXFCO0lBQ2pDLElBQUksTUFBTSxHQUFpQixFQUFFLENBQUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGVBQWUsRUFBRSx3QkFBd0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMseUJBQXlCLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHdEQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBBaXJwbGFuZVN0YXR1c0NvZGUgfSBmcm9tICcuJztcbmltcG9ydCB7IEFpcnBsYW5lVmFsaWRhdGlvbkZsYWcgfSBmcm9tICcuJztcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4nO1xuaW1wb3J0IHsgTWFnbmV0byB9IGZyb20gJy4nO1xuaW1wb3J0IHsgUHJvcGVsbGVyIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBGdWVsIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBCYXNlRW50aXR5RXggfSBmcm9tICcuJztcbmltcG9ydCB7IENvbHVtbkRlZiB9IGZyb20gJy4nO1xuXG5cblxuLy8gQWlycGxhbmUgZW50aXR5IHJlcHJlc2VudHMgYW4gYWlycGxhbmVcbmV4cG9ydCBjbGFzcyBBaXJwbGFuZSBleHRlbmRzIEJhc2VFbnRpdHlFeCB7XG4gXG4gICAgLy8gTmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIERlc2NyaXB0aW9uIFxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIEFpcnBsYW5lIG1vZGVsIFxuICAgIHB1YmxpYyBtb2RlbDogc3RyaW5nO1xuIFxuICAgIC8vIEFpcnBsYW5lIHNlcmlhbCBudW1iZXIgXG4gICAgcHVibGljIHNlcmlhbE5vOiBzdHJpbmc7XG4gXG4gICAgLy8gQWlycGxhbmUgc3RhdHVzIFxuICAgIHB1YmxpYyBzdGF0dXM6IEFpcnBsYW5lU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBBaXJwbGFuZSBob2JzIGNvdW50ZXIgXG4gICAgcHVibGljIGhvYnM6IG51bWJlcjtcbiBcbiAgICAvLyBBaXJwbGFuZSB0YWNob21ldGVyIGNvdW50ZXIgXG4gICAgcHVibGljIHRhY2g6IG51bWJlcjtcbiBcbiAgICAvLyBBaXJwbGFuZSBuZXh0IHRhY2hvbWV0ZXIgZm9yIGluc3BlY3Rpb24gXG4gICAgcHVibGljIG5leHRUYWNoOiBudW1iZXI7XG4gXG4gICAgLy8gQWlycGxhbmUgYWlyIHRpbWUgKGhvdXJzKSBcbiAgICBwdWJsaWMgYWlyVGltZTogbnVtYmVyO1xuIFxuICAgIC8vIEFpcnBsYW5lIGN1c3RvbWVyIG51bWJlciBcbiAgICBwdWJsaWMgY3VzdG9tZXJObzogc3RyaW5nO1xuIFxuICAgIC8vIEFpcndvcnRoaW5lc3MgZmxhZ3MgXG4gICAgcHVibGljIGFpcndvcnRoaW5lc3M6IEFpcnBsYW5lVmFsaWRhdGlvbkZsYWc7XG4gXG4gICAgLy8gRml4ZWQgdmFsdWUgdG8gZmlyc3QgZmxpZ2h0IFxuICAgIHB1YmxpYyBmaXhlZFZhbHVlVG9GaXJzdEZsaWdodDogbnVtYmVyO1xuIFxuICAgIC8vIEFDIHRvdGFsIHRpbWUgXG4gICAgcHVibGljIGFjVG90YWxUaW1lOiBudW1iZXI7XG4gXG4gICAgLy8gU2luZ2xlIC8gTGVmdCBFbmdpbmUgaW5kaWNhdG9ycyBcbiAgICBwdWJsaWMgZW5naW5lOiBFbmdpbmU7XG4gXG4gICAgLy8gTGVmdCBNYWduZXRvIGluZGljYXRvcnMgXG4gICAgcHVibGljIGxlZnRNYWduZXRvOiBNYWduZXRvO1xuIFxuICAgIC8vIFJpZ2h0IE1hZ25ldG8gaW5kaWNhdG9ycyBcbiAgICBwdWJsaWMgcmlnaHRNYWduZXRvOiBNYWduZXRvO1xuIFxuICAgIC8vIFNpbmdsZSAvIExlZnQgUHJvcGVsbGVyIGluZGljYXRvcnMgXG4gICAgcHVibGljIHByb3BlbGxlcjogUHJvcGVsbGVyO1xuIFxuICAgIC8vIEZ1ZWwgaW5kaWNhdG9ycyBcbiAgICBwdWJsaWMgZnVlbDogRnVlbDtcbiBcbiAgICAvLyBBaXJwbGFuZSByZWxhdGVkIGRvY3VtZW50cyBcbiAgICBwdWJsaWMgZG9jdW1lbnRzOiBzdHJpbmdbXTtcbiBcbiBcblxuIFxuXHRnZXQoZmllbGQ6IHN0cmluZykgOiBhbnkge1xuXHRcdGlmICghdGhpcy5wcm9wcykge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdGxldCB2YWwgPSB0aGlzLnByb3BzLmdldChmaWVsZCk7XG5cdFx0cmV0dXJuIFN0cmluZyh2YWwpO1xuXHR9XG4gXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gR2V0QWlycGxhbmVDb2x1bW5zRGVmKCkgOiBDb2x1bW5EZWZbXSB7XG4gICAgbGV0IHJlc3VsdCA6IENvbHVtbkRlZltdID0gW107XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJpZFwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjcmVhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJ1cGRhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJuYW1lXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImRlc2NyaXB0aW9uXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm1vZGVsXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInNlcmlhbE5vXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInN0YXR1c1wiLCBcIkFpcnBsYW5lU3RhdHVzQ29kZVwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJob2JzXCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJ0YWNoXCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJuZXh0VGFjaFwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWlyVGltZVwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiY3VzdG9tZXJOb1wiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhaXJ3b3J0aGluZXNzXCIsIFwiQWlycGxhbmVWYWxpZGF0aW9uRmxhZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmaXhlZFZhbHVlVG9GaXJzdEZsaWdodFwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWNUb3RhbFRpbWVcIiwgXCJudW1iZXJcIiwgXCJkZWNpbWFsXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImVuZ2luZVwiLCBcIkVuZ2luZVwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsZWZ0TWFnbmV0b1wiLCBcIk1hZ25ldG9cIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwicmlnaHRNYWduZXRvXCIsIFwiTWFnbmV0b1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwcm9wZWxsZXJcIiwgXCJQcm9wZWxsZXJcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZnVlbFwiLCBcIkZ1ZWxcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZG9jdW1lbnRzXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuXG5cblxuXG5cbiJdfQ==