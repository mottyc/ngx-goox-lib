import { BaseEntityEx } from '.';
import { ColumnDef } from '.';
// Airplane entity represents an airplane
export class Airplane extends BaseEntityEx {
    // Write dynamic props getter
    prop(field) {
        if (!this.props) {
            return "";
        }
        const val = this.props.get(field);
        return String(val);
    }
}
export function GetAirplaneColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("name", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("model", "string", ""));
    result.push(new ColumnDef("serialNo", "string", ""));
    result.push(new ColumnDef("status", "AirplaneStatusCode", ""));
    result.push(new ColumnDef("hobs", "number", "decimal"));
    result.push(new ColumnDef("tach", "number", "decimal"));
    result.push(new ColumnDef("nextTach", "number", "decimal"));
    result.push(new ColumnDef("airTime", "number", "decimal"));
    result.push(new ColumnDef("customerNo", "string", ""));
    result.push(new ColumnDef("airworthiness", "AirplaneValidationFlag", ""));
    result.push(new ColumnDef("fixedValueToFirstFlight", "number", "decimal"));
    result.push(new ColumnDef("acTotalTime", "number", "decimal"));
    result.push(new ColumnDef("engine", "Engine", ""));
    result.push(new ColumnDef("leftMagneto", "Magneto", ""));
    result.push(new ColumnDef("rightMagneto", "Magneto", ""));
    result.push(new ColumnDef("propeller", "Propeller", ""));
    result.push(new ColumnDef("fuel", "Fuel", ""));
    result.push(new ColumnDef("documents", "string", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWlycGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9BaXJwbGFuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFPOUIseUNBQXlDO0FBQ3pDLE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQThEekMsNkJBQTZCO0lBQ3RCLElBQUksQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDbkIsQ0FBQztDQUdEO0FBR0QsTUFBTSxVQUFVLHFCQUFxQjtJQUNqQyxJQUFJLE1BQU0sR0FBaUIsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLHlCQUF5QixFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBR3RELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgTWFnbmV0byB9IGZyb20gJy4nO1xuaW1wb3J0IHsgUHJvcGVsbGVyIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBGdWVsIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBCYXNlRW50aXR5RXggfSBmcm9tICcuJztcbmltcG9ydCB7IENvbHVtbkRlZiB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQWlycGxhbmVTdGF0dXNDb2RlIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBBaXJwbGFuZVZhbGlkYXRpb25GbGFnIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuJztcblxuXG5cbi8vIEFpcnBsYW5lIGVudGl0eSByZXByZXNlbnRzIGFuIGFpcnBsYW5lXG5leHBvcnQgY2xhc3MgQWlycGxhbmUgZXh0ZW5kcyBCYXNlRW50aXR5RXgge1xuIFxuICAgIC8vIE5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBEZXNjcmlwdGlvbiBcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiBcbiAgICAvLyBBaXJwbGFuZSBtb2RlbCBcbiAgICBwdWJsaWMgbW9kZWw6IHN0cmluZztcbiBcbiAgICAvLyBBaXJwbGFuZSBzZXJpYWwgbnVtYmVyIFxuICAgIHB1YmxpYyBzZXJpYWxObzogc3RyaW5nO1xuIFxuICAgIC8vIEFpcnBsYW5lIHN0YXR1cyBcbiAgICBwdWJsaWMgc3RhdHVzOiBBaXJwbGFuZVN0YXR1c0NvZGU7XG4gXG4gICAgLy8gQWlycGxhbmUgaG9icyBjb3VudGVyIFxuICAgIHB1YmxpYyBob2JzOiBudW1iZXI7XG4gXG4gICAgLy8gQWlycGxhbmUgdGFjaG9tZXRlciBjb3VudGVyIFxuICAgIHB1YmxpYyB0YWNoOiBudW1iZXI7XG4gXG4gICAgLy8gQWlycGxhbmUgbmV4dCB0YWNob21ldGVyIGZvciBpbnNwZWN0aW9uIFxuICAgIHB1YmxpYyBuZXh0VGFjaDogbnVtYmVyO1xuIFxuICAgIC8vIEFpcnBsYW5lIGFpciB0aW1lIChob3VycykgXG4gICAgcHVibGljIGFpclRpbWU6IG51bWJlcjtcbiBcbiAgICAvLyBBaXJwbGFuZSBjdXN0b21lciBudW1iZXIgXG4gICAgcHVibGljIGN1c3RvbWVyTm86IHN0cmluZztcbiBcbiAgICAvLyBBaXJ3b3J0aGluZXNzIGZsYWdzIFxuICAgIHB1YmxpYyBhaXJ3b3J0aGluZXNzOiBBaXJwbGFuZVZhbGlkYXRpb25GbGFnO1xuIFxuICAgIC8vIEZpeGVkIHZhbHVlIHRvIGZpcnN0IGZsaWdodCBcbiAgICBwdWJsaWMgZml4ZWRWYWx1ZVRvRmlyc3RGbGlnaHQ6IG51bWJlcjtcbiBcbiAgICAvLyBBQyB0b3RhbCB0aW1lIFxuICAgIHB1YmxpYyBhY1RvdGFsVGltZTogbnVtYmVyO1xuIFxuICAgIC8vIFNpbmdsZSAvIExlZnQgRW5naW5lIGluZGljYXRvcnMgXG4gICAgcHVibGljIGVuZ2luZTogRW5naW5lO1xuIFxuICAgIC8vIExlZnQgTWFnbmV0byBpbmRpY2F0b3JzIFxuICAgIHB1YmxpYyBsZWZ0TWFnbmV0bzogTWFnbmV0bztcbiBcbiAgICAvLyBSaWdodCBNYWduZXRvIGluZGljYXRvcnMgXG4gICAgcHVibGljIHJpZ2h0TWFnbmV0bzogTWFnbmV0bztcbiBcbiAgICAvLyBTaW5nbGUgLyBMZWZ0IFByb3BlbGxlciBpbmRpY2F0b3JzIFxuICAgIHB1YmxpYyBwcm9wZWxsZXI6IFByb3BlbGxlcjtcbiBcbiAgICAvLyBGdWVsIGluZGljYXRvcnMgXG4gICAgcHVibGljIGZ1ZWw6IEZ1ZWw7XG4gXG4gICAgLy8gQWlycGxhbmUgcmVsYXRlZCBkb2N1bWVudHMgXG4gICAgcHVibGljIGRvY3VtZW50czogc3RyaW5nW107XG4gXG4gXG5cbiBcblx0Ly8gV3JpdGUgZHluYW1pYyBwcm9wcyBnZXR0ZXJcblx0cHVibGljIHByb3AoZmllbGQ6IHN0cmluZykgOiBhbnkge1xuXHRcdGlmICghdGhpcy5wcm9wcykge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdGNvbnN0IHZhbCA9IHRoaXMucHJvcHMuZ2V0KGZpZWxkKVxuXHRcdHJldHVybiBTdHJpbmcodmFsKVxuXHR9XG4gXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gR2V0QWlycGxhbmVDb2x1bW5zRGVmKCkgOiBDb2x1bW5EZWZbXSB7XG4gICAgbGV0IHJlc3VsdCA6IENvbHVtbkRlZltdID0gW107XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJpZFwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjcmVhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJ1cGRhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJuYW1lXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImRlc2NyaXB0aW9uXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm1vZGVsXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInNlcmlhbE5vXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInN0YXR1c1wiLCBcIkFpcnBsYW5lU3RhdHVzQ29kZVwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJob2JzXCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJ0YWNoXCIsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJuZXh0VGFjaFwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWlyVGltZVwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiY3VzdG9tZXJOb1wiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhaXJ3b3J0aGluZXNzXCIsIFwiQWlycGxhbmVWYWxpZGF0aW9uRmxhZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmaXhlZFZhbHVlVG9GaXJzdEZsaWdodFwiLCBcIm51bWJlclwiLCBcImRlY2ltYWxcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYWNUb3RhbFRpbWVcIiwgXCJudW1iZXJcIiwgXCJkZWNpbWFsXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImVuZ2luZVwiLCBcIkVuZ2luZVwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJsZWZ0TWFnbmV0b1wiLCBcIk1hZ25ldG9cIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwicmlnaHRNYWduZXRvXCIsIFwiTWFnbmV0b1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwcm9wZWxsZXJcIiwgXCJQcm9wZWxsZXJcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZnVlbFwiLCBcIkZ1ZWxcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZG9jdW1lbnRzXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuXG5cblxuXG5cbiJdfQ==