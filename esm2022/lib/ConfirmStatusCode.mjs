import { Tuple } from '.';
// ConfirmStatusCode represents the contact confirmation status: PENDING | APPROVED | REJECTED ...
export var ConfirmStatusCode;
(function (ConfirmStatusCode) {
    // Undefined [0] 
    ConfirmStatusCode[ConfirmStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Pending not read yet [1] 
    ConfirmStatusCode[ConfirmStatusCode["PENDING"] = 1] = "PENDING";
    // Approved by the contact [2] 
    ConfirmStatusCode[ConfirmStatusCode["APPROVED"] = 2] = "APPROVED";
    // Rejected by the contact [3] 
    ConfirmStatusCode[ConfirmStatusCode["REJECTED"] = 3] = "REJECTED";
})(ConfirmStatusCode || (ConfirmStatusCode = {}));
// Return list of ConfirmStatusCode values and their display names
export function GetConfirmStatusCodes() {
    let result = [];
    result.push(new Tuple(ConfirmStatusCode.PENDING, 'ConfirmStatusCode.PENDING'));
    result.push(new Tuple(ConfirmStatusCode.APPROVED, 'ConfirmStatusCode.APPROVED'));
    result.push(new Tuple(ConfirmStatusCode.REJECTED, 'ConfirmStatusCode.REJECTED'));
    return result;
}
// Return map of ConfirmStatusCode values and their display names
export function MapConfirmStatusCodes() {
    let result = new Map();
    result.set(ConfirmStatusCode.UNDEFINED, 'Undefined');
    result.set(ConfirmStatusCode.PENDING, 'Pending');
    result.set(ConfirmStatusCode.APPROVED, 'Approved');
    result.set(ConfirmStatusCode.REJECTED, 'Rejected');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlybVN0YXR1c0NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9Db25maXJtU3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLGtHQUFrRztBQUNsRyxNQUFNLENBQU4sSUFBWSxpQkFjWDtBQWRELFdBQVksaUJBQWlCO0lBRXpCLGlCQUFpQjtJQUNqQixtRUFBYSxDQUFBO0lBRWIsNEJBQTRCO0lBQzVCLCtEQUFXLENBQUE7SUFFWCwrQkFBK0I7SUFDL0IsaUVBQVksQ0FBQTtJQUVaLCtCQUErQjtJQUMvQixpRUFBWSxDQUFBO0FBRWhCLENBQUMsRUFkVyxpQkFBaUIsS0FBakIsaUJBQWlCLFFBYzVCO0FBRUQsa0VBQWtFO0FBQ2xFLE1BQU0sVUFBVSxxQkFBcUI7SUFDcEMsSUFBSSxNQUFNLEdBQXdDLEVBQUUsQ0FBQztJQUdyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUE0QixpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFBO0lBRXpHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTRCLGlCQUFpQixDQUFDLFFBQVEsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLENBQUE7SUFFM0csTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBNEIsaUJBQWlCLENBQUMsUUFBUSxFQUFFLDRCQUE0QixDQUFDLENBQUMsQ0FBQTtJQUd4RyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsaUVBQWlFO0FBQ2pFLE1BQU0sVUFBVSxxQkFBcUI7SUFDakMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7SUFHckQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFckQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFHaEQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgVHVwbGUgfSBmcm9tICcuJztcblxuXG4vLyBDb25maXJtU3RhdHVzQ29kZSByZXByZXNlbnRzIHRoZSBjb250YWN0IGNvbmZpcm1hdGlvbiBzdGF0dXM6IFBFTkRJTkcgfCBBUFBST1ZFRCB8IFJFSkVDVEVEIC4uLlxuZXhwb3J0IGVudW0gQ29uZmlybVN0YXR1c0NvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBQZW5kaW5nIG5vdCByZWFkIHlldCBbMV0gXG4gICAgUEVORElORyA9IDEsXG4gXG4gICAgLy8gQXBwcm92ZWQgYnkgdGhlIGNvbnRhY3QgWzJdIFxuICAgIEFQUFJPVkVEID0gMixcbiBcbiAgICAvLyBSZWplY3RlZCBieSB0aGUgY29udGFjdCBbM10gXG4gICAgUkVKRUNURUQgPSAzLFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBDb25maXJtU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXRDb25maXJtU3RhdHVzQ29kZXMoKSA6IFR1cGxlPENvbmZpcm1TdGF0dXNDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8Q29uZmlybVN0YXR1c0NvZGUsIHN0cmluZz5bXSA9IFtdO1xuXG4gICAgXG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxDb25maXJtU3RhdHVzQ29kZSwgc3RyaW5nPihDb25maXJtU3RhdHVzQ29kZS5QRU5ESU5HLCAnQ29uZmlybVN0YXR1c0NvZGUuUEVORElORycpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPENvbmZpcm1TdGF0dXNDb2RlLCBzdHJpbmc+KENvbmZpcm1TdGF0dXNDb2RlLkFQUFJPVkVELCAnQ29uZmlybVN0YXR1c0NvZGUuQVBQUk9WRUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxDb25maXJtU3RhdHVzQ29kZSwgc3RyaW5nPihDb25maXJtU3RhdHVzQ29kZS5SRUpFQ1RFRCwgJ0NvbmZpcm1TdGF0dXNDb2RlLlJFSkVDVEVEJykpXG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUmV0dXJuIG1hcCBvZiBDb25maXJtU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBDb25maXJtU3RhdHVzQ29kZXMoKSA6IE1hcDxDb25maXJtU3RhdHVzQ29kZSwgc3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8Q29uZmlybVN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KENvbmZpcm1TdGF0dXNDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuXHRcblx0cmVzdWx0LnNldChDb25maXJtU3RhdHVzQ29kZS5QRU5ESU5HLCAnUGVuZGluZycpO1xuXHRcblx0cmVzdWx0LnNldChDb25maXJtU3RhdHVzQ29kZS5BUFBST1ZFRCwgJ0FwcHJvdmVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KENvbmZpcm1TdGF0dXNDb2RlLlJFSkVDVEVELCAnUmVqZWN0ZWQnKTtcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19