import { Tuple } from '.';
// FlightStatusCode represents a flight status can be changed by the operator:  ...
export var FlightStatusCode;
(function (FlightStatusCode) {
    // Undefined [0] 
    FlightStatusCode[FlightStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Registered flight [1] 
    FlightStatusCode[FlightStatusCode["REGISTERED"] = 1] = "REGISTERED";
    // Pending deletion [2] 
    FlightStatusCode[FlightStatusCode["DELETE"] = 2] = "DELETE";
    // Cancelled by Aya [3] 
    FlightStatusCode[FlightStatusCode["CANCELLED"] = 3] = "CANCELLED";
    // Aborted - cancelled by client [4] 
    FlightStatusCode[FlightStatusCode["ABORTED"] = 4] = "ABORTED";
})(FlightStatusCode || (FlightStatusCode = {}));
// Return list of FlightStatusCode values and their display names
export function GetFlightStatusCodes() {
    let result = [];
    result.push(new Tuple(FlightStatusCode.REGISTERED, 'FlightStatusCode.REGISTERED'));
    result.push(new Tuple(FlightStatusCode.DELETE, 'FlightStatusCode.DELETE'));
    result.push(new Tuple(FlightStatusCode.CANCELLED, 'FlightStatusCode.CANCELLED'));
    result.push(new Tuple(FlightStatusCode.ABORTED, 'FlightStatusCode.ABORTED'));
    return result;
}
// Return map of FlightStatusCode values and their display names
export function MapFlightStatusCodes() {
    let result = new Map();
    result.set(FlightStatusCode.UNDEFINED, 'Undefined');
    result.set(FlightStatusCode.REGISTERED, 'Registered');
    result.set(FlightStatusCode.DELETE, 'Delete');
    result.set(FlightStatusCode.CANCELLED, 'Cancelled');
    result.set(FlightStatusCode.ABORTED, 'Aborted');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxpZ2h0U3RhdHVzQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL0ZsaWdodFN0YXR1c0NvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUcxQixtRkFBbUY7QUFDbkYsTUFBTSxDQUFOLElBQVksZ0JBaUJYO0FBakJELFdBQVksZ0JBQWdCO0lBRXhCLGlCQUFpQjtJQUNqQixpRUFBYSxDQUFBO0lBRWIseUJBQXlCO0lBQ3pCLG1FQUFjLENBQUE7SUFFZCx3QkFBd0I7SUFDeEIsMkRBQVUsQ0FBQTtJQUVWLHdCQUF3QjtJQUN4QixpRUFBYSxDQUFBO0lBRWIscUNBQXFDO0lBQ3JDLDZEQUFXLENBQUE7QUFFZixDQUFDLEVBakJXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFpQjNCO0FBRUQsaUVBQWlFO0FBQ2pFLE1BQU0sVUFBVSxvQkFBb0I7SUFDbkMsSUFBSSxNQUFNLEdBQXVDLEVBQUUsQ0FBQztJQUdwRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEyQixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFBO0lBRTVHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTJCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLENBQUE7SUFFcEcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBMkIsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLDRCQUE0QixDQUFDLENBQUMsQ0FBQTtJQUUxRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEyQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBR25HLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBNEIsQ0FBQztJQUdwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUV0RCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUc3QyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBUdXBsZSB9IGZyb20gJy4nO1xuXG5cbi8vIEZsaWdodFN0YXR1c0NvZGUgcmVwcmVzZW50cyBhIGZsaWdodCBzdGF0dXMgY2FuIGJlIGNoYW5nZWQgYnkgdGhlIG9wZXJhdG9yOiAgLi4uXG5leHBvcnQgZW51bSBGbGlnaHRTdGF0dXNDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gUmVnaXN0ZXJlZCBmbGlnaHQgWzFdIFxuICAgIFJFR0lTVEVSRUQgPSAxLFxuIFxuICAgIC8vIFBlbmRpbmcgZGVsZXRpb24gWzJdIFxuICAgIERFTEVURSA9IDIsXG4gXG4gICAgLy8gQ2FuY2VsbGVkIGJ5IEF5YSBbM10gXG4gICAgQ0FOQ0VMTEVEID0gMyxcbiBcbiAgICAvLyBBYm9ydGVkIC0gY2FuY2VsbGVkIGJ5IGNsaWVudCBbNF0gXG4gICAgQUJPUlRFRCA9IDQsXG4gXG59XG5cbi8vIFJldHVybiBsaXN0IG9mIEZsaWdodFN0YXR1c0NvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0RmxpZ2h0U3RhdHVzQ29kZXMoKSA6IFR1cGxlPEZsaWdodFN0YXR1c0NvZGUsIHN0cmluZz5bXSB7XG5cdGxldCByZXN1bHQgOiBUdXBsZTxGbGlnaHRTdGF0dXNDb2RlLCBzdHJpbmc+W10gPSBbXTtcblxuICAgIFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0U3RhdHVzQ29kZSwgc3RyaW5nPihGbGlnaHRTdGF0dXNDb2RlLlJFR0lTVEVSRUQsICdGbGlnaHRTdGF0dXNDb2RlLlJFR0lTVEVSRUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRTdGF0dXNDb2RlLCBzdHJpbmc+KEZsaWdodFN0YXR1c0NvZGUuREVMRVRFLCAnRmxpZ2h0U3RhdHVzQ29kZS5ERUxFVEUnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRTdGF0dXNDb2RlLCBzdHJpbmc+KEZsaWdodFN0YXR1c0NvZGUuQ0FOQ0VMTEVELCAnRmxpZ2h0U3RhdHVzQ29kZS5DQU5DRUxMRUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRTdGF0dXNDb2RlLCBzdHJpbmc+KEZsaWdodFN0YXR1c0NvZGUuQUJPUlRFRCwgJ0ZsaWdodFN0YXR1c0NvZGUuQUJPUlRFRCcpKVxuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFJldHVybiBtYXAgb2YgRmxpZ2h0U3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBGbGlnaHRTdGF0dXNDb2RlcygpIDogTWFwPEZsaWdodFN0YXR1c0NvZGUsIHN0cmluZz4ge1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPEZsaWdodFN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KEZsaWdodFN0YXR1c0NvZGUuVU5ERUZJTkVELCAnVW5kZWZpbmVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEZsaWdodFN0YXR1c0NvZGUuUkVHSVNURVJFRCwgJ1JlZ2lzdGVyZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0U3RhdHVzQ29kZS5ERUxFVEUsICdEZWxldGUnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0U3RhdHVzQ29kZS5DQU5DRUxMRUQsICdDYW5jZWxsZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0U3RhdHVzQ29kZS5BQk9SVEVELCAnQWJvcnRlZCcpO1xuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=