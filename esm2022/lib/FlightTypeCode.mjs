import { Tuple } from '.';
// FlightTypeCode represents a flight type:  GENERAL | PRIVATE | COMMERCIAL ...
export var FlightTypeCode;
(function (FlightTypeCode) {
    // Undefined [0] 
    FlightTypeCode[FlightTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // General Purpose Flight [1] 
    FlightTypeCode[FlightTypeCode["GENERAL"] = 1] = "GENERAL";
    // Other Flight [2] 
    FlightTypeCode[FlightTypeCode["OTHER"] = 2] = "OTHER";
    // Private Flight [3] 
    FlightTypeCode[FlightTypeCode["PRIVATE"] = 3] = "PRIVATE";
    // Private Flight with IFR [4] 
    FlightTypeCode[FlightTypeCode["PRIVATE_IFR"] = 4] = "PRIVATE_IFR";
    // Commercial Flight [5] 
    FlightTypeCode[FlightTypeCode["COMMERCIAL"] = 5] = "COMMERCIAL";
    // Commercial Flight with IFR [6] 
    FlightTypeCode[FlightTypeCode["COMMERCIAL_IFR"] = 6] = "COMMERCIAL_IFR";
    // Instruction Flight [7] 
    FlightTypeCode[FlightTypeCode["INSTRUCTION"] = 7] = "INSTRUCTION";
    // Instruction Flight with CVFR [8] 
    FlightTypeCode[FlightTypeCode["INSTRUCTION_CVFR"] = 8] = "INSTRUCTION_CVFR";
    // Instruction Flight with IFR [9] 
    FlightTypeCode[FlightTypeCode["INSTRUCTION_IFR"] = 9] = "INSTRUCTION_IFR";
    // Instruction Flight with Navigation [10] 
    FlightTypeCode[FlightTypeCode["INSTRUCTION_NAV"] = 10] = "INSTRUCTION_NAV";
    // Instruction Night Flight [11] 
    FlightTypeCode[FlightTypeCode["INSTRUCTION_NIGHT"] = 11] = "INSTRUCTION_NIGHT";
})(FlightTypeCode || (FlightTypeCode = {}));
// Return list of FlightTypeCode values and their display names
export function GetFlightTypeCodes() {
    let result = [];
    result.push(new Tuple(FlightTypeCode.GENERAL, 'FlightTypeCode.GENERAL'));
    result.push(new Tuple(FlightTypeCode.OTHER, 'FlightTypeCode.OTHER'));
    result.push(new Tuple(FlightTypeCode.PRIVATE, 'FlightTypeCode.PRIVATE'));
    result.push(new Tuple(FlightTypeCode.PRIVATE_IFR, 'FlightTypeCode.PRIVATE_IFR'));
    result.push(new Tuple(FlightTypeCode.COMMERCIAL, 'FlightTypeCode.COMMERCIAL'));
    result.push(new Tuple(FlightTypeCode.COMMERCIAL_IFR, 'FlightTypeCode.COMMERCIAL_IFR'));
    result.push(new Tuple(FlightTypeCode.INSTRUCTION, 'FlightTypeCode.INSTRUCTION'));
    result.push(new Tuple(FlightTypeCode.INSTRUCTION_CVFR, 'FlightTypeCode.INSTRUCTION_CVFR'));
    result.push(new Tuple(FlightTypeCode.INSTRUCTION_IFR, 'FlightTypeCode.INSTRUCTION_IFR'));
    result.push(new Tuple(FlightTypeCode.INSTRUCTION_NAV, 'FlightTypeCode.INSTRUCTION_NAV'));
    result.push(new Tuple(FlightTypeCode.INSTRUCTION_NIGHT, 'FlightTypeCode.INSTRUCTION_NIGHT'));
    return result;
}
// Return map of FlightTypeCode values and their display names
export function MapFlightTypeCodes() {
    let result = new Map();
    result.set(FlightTypeCode.UNDEFINED, 'Undefined');
    result.set(FlightTypeCode.GENERAL, 'General');
    result.set(FlightTypeCode.OTHER, 'Other');
    result.set(FlightTypeCode.PRIVATE, 'Private');
    result.set(FlightTypeCode.PRIVATE_IFR, 'Private Ifr');
    result.set(FlightTypeCode.COMMERCIAL, 'Commercial');
    result.set(FlightTypeCode.COMMERCIAL_IFR, 'Commercial Ifr');
    result.set(FlightTypeCode.INSTRUCTION, 'Instruction');
    result.set(FlightTypeCode.INSTRUCTION_CVFR, 'Instruction Cvfr');
    result.set(FlightTypeCode.INSTRUCTION_IFR, 'Instruction Ifr');
    result.set(FlightTypeCode.INSTRUCTION_NAV, 'Instruction Nav');
    result.set(FlightTypeCode.INSTRUCTION_NIGHT, 'Instruction Night');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxpZ2h0VHlwZUNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9GbGlnaHRUeXBlQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLCtFQUErRTtBQUMvRSxNQUFNLENBQU4sSUFBWSxjQXNDWDtBQXRDRCxXQUFZLGNBQWM7SUFFdEIsaUJBQWlCO0lBQ2pCLDZEQUFhLENBQUE7SUFFYiw4QkFBOEI7SUFDOUIseURBQVcsQ0FBQTtJQUVYLG9CQUFvQjtJQUNwQixxREFBUyxDQUFBO0lBRVQsc0JBQXNCO0lBQ3RCLHlEQUFXLENBQUE7SUFFWCwrQkFBK0I7SUFDL0IsaUVBQWUsQ0FBQTtJQUVmLHlCQUF5QjtJQUN6QiwrREFBYyxDQUFBO0lBRWQsa0NBQWtDO0lBQ2xDLHVFQUFrQixDQUFBO0lBRWxCLDBCQUEwQjtJQUMxQixpRUFBZSxDQUFBO0lBRWYsb0NBQW9DO0lBQ3BDLDJFQUFvQixDQUFBO0lBRXBCLG1DQUFtQztJQUNuQyx5RUFBbUIsQ0FBQTtJQUVuQiwyQ0FBMkM7SUFDM0MsMEVBQW9CLENBQUE7SUFFcEIsaUNBQWlDO0lBQ2pDLDhFQUFzQixDQUFBO0FBRTFCLENBQUMsRUF0Q1csY0FBYyxLQUFkLGNBQWMsUUFzQ3pCO0FBRUQsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxrQkFBa0I7SUFDakMsSUFBSSxNQUFNLEdBQXFDLEVBQUUsQ0FBQztJQUdsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQTtJQUVoRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtJQUU1RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQTtJQUVoRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUMsQ0FBQTtJQUV4RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsVUFBVSxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUV0RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsY0FBYyxFQUFFLCtCQUErQixDQUFDLENBQUMsQ0FBQTtJQUU5RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUMsQ0FBQTtJQUV4RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUF5QixjQUFjLENBQUMsZ0JBQWdCLEVBQUUsaUNBQWlDLENBQUMsQ0FBQyxDQUFBO0lBRWxILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxlQUFlLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQyxDQUFBO0lBRWhILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxlQUFlLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQyxDQUFBO0lBRWhILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXlCLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDLENBQUE7SUFHakgsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELDhEQUE4RDtBQUM5RCxNQUFNLFVBQVUsa0JBQWtCO0lBQzlCLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO0lBR2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFdEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRXBELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTVELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUV0RCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRTlELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRTlELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFHL0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgVHVwbGUgfSBmcm9tICcuJztcblxuXG4vLyBGbGlnaHRUeXBlQ29kZSByZXByZXNlbnRzIGEgZmxpZ2h0IHR5cGU6ICBHRU5FUkFMIHwgUFJJVkFURSB8IENPTU1FUkNJQUwgLi4uXG5leHBvcnQgZW51bSBGbGlnaHRUeXBlQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIEdlbmVyYWwgUHVycG9zZSBGbGlnaHQgWzFdIFxuICAgIEdFTkVSQUwgPSAxLFxuIFxuICAgIC8vIE90aGVyIEZsaWdodCBbMl0gXG4gICAgT1RIRVIgPSAyLFxuIFxuICAgIC8vIFByaXZhdGUgRmxpZ2h0IFszXSBcbiAgICBQUklWQVRFID0gMyxcbiBcbiAgICAvLyBQcml2YXRlIEZsaWdodCB3aXRoIElGUiBbNF0gXG4gICAgUFJJVkFURV9JRlIgPSA0LFxuIFxuICAgIC8vIENvbW1lcmNpYWwgRmxpZ2h0IFs1XSBcbiAgICBDT01NRVJDSUFMID0gNSxcbiBcbiAgICAvLyBDb21tZXJjaWFsIEZsaWdodCB3aXRoIElGUiBbNl0gXG4gICAgQ09NTUVSQ0lBTF9JRlIgPSA2LFxuIFxuICAgIC8vIEluc3RydWN0aW9uIEZsaWdodCBbN10gXG4gICAgSU5TVFJVQ1RJT04gPSA3LFxuIFxuICAgIC8vIEluc3RydWN0aW9uIEZsaWdodCB3aXRoIENWRlIgWzhdIFxuICAgIElOU1RSVUNUSU9OX0NWRlIgPSA4LFxuIFxuICAgIC8vIEluc3RydWN0aW9uIEZsaWdodCB3aXRoIElGUiBbOV0gXG4gICAgSU5TVFJVQ1RJT05fSUZSID0gOSxcbiBcbiAgICAvLyBJbnN0cnVjdGlvbiBGbGlnaHQgd2l0aCBOYXZpZ2F0aW9uIFsxMF0gXG4gICAgSU5TVFJVQ1RJT05fTkFWID0gMTAsXG4gXG4gICAgLy8gSW5zdHJ1Y3Rpb24gTmlnaHQgRmxpZ2h0IFsxMV0gXG4gICAgSU5TVFJVQ1RJT05fTklHSFQgPSAxMSxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgRmxpZ2h0VHlwZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0RmxpZ2h0VHlwZUNvZGVzKCkgOiBUdXBsZTxGbGlnaHRUeXBlQ29kZSwgc3RyaW5nPltdIHtcblx0bGV0IHJlc3VsdCA6IFR1cGxlPEZsaWdodFR5cGVDb2RlLCBzdHJpbmc+W10gPSBbXTtcblxuICAgIFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuR0VORVJBTCwgJ0ZsaWdodFR5cGVDb2RlLkdFTkVSQUwnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRUeXBlQ29kZSwgc3RyaW5nPihGbGlnaHRUeXBlQ29kZS5PVEhFUiwgJ0ZsaWdodFR5cGVDb2RlLk9USEVSJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuUFJJVkFURSwgJ0ZsaWdodFR5cGVDb2RlLlBSSVZBVEUnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRUeXBlQ29kZSwgc3RyaW5nPihGbGlnaHRUeXBlQ29kZS5QUklWQVRFX0lGUiwgJ0ZsaWdodFR5cGVDb2RlLlBSSVZBVEVfSUZSJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuQ09NTUVSQ0lBTCwgJ0ZsaWdodFR5cGVDb2RlLkNPTU1FUkNJQUwnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRUeXBlQ29kZSwgc3RyaW5nPihGbGlnaHRUeXBlQ29kZS5DT01NRVJDSUFMX0lGUiwgJ0ZsaWdodFR5cGVDb2RlLkNPTU1FUkNJQUxfSUZSJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT04sICdGbGlnaHRUeXBlQ29kZS5JTlNUUlVDVElPTicpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEZsaWdodFR5cGVDb2RlLCBzdHJpbmc+KEZsaWdodFR5cGVDb2RlLklOU1RSVUNUSU9OX0NWRlIsICdGbGlnaHRUeXBlQ29kZS5JTlNUUlVDVElPTl9DVkZSJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fSUZSLCAnRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fSUZSJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fTkFWLCAnRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fTkFWJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4oRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fTklHSFQsICdGbGlnaHRUeXBlQ29kZS5JTlNUUlVDVElPTl9OSUdIVCcpKVxuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFJldHVybiBtYXAgb2YgRmxpZ2h0VHlwZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gTWFwRmxpZ2h0VHlwZUNvZGVzKCkgOiBNYXA8RmxpZ2h0VHlwZUNvZGUsIHN0cmluZz4ge1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPEZsaWdodFR5cGVDb2RlLCBzdHJpbmc+KCk7XG5cbiAgICBcblx0cmVzdWx0LnNldChGbGlnaHRUeXBlQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0VHlwZUNvZGUuR0VORVJBTCwgJ0dlbmVyYWwnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0VHlwZUNvZGUuT1RIRVIsICdPdGhlcicpO1xuXHRcblx0cmVzdWx0LnNldChGbGlnaHRUeXBlQ29kZS5QUklWQVRFLCAnUHJpdmF0ZScpO1xuXHRcblx0cmVzdWx0LnNldChGbGlnaHRUeXBlQ29kZS5QUklWQVRFX0lGUiwgJ1ByaXZhdGUgSWZyJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEZsaWdodFR5cGVDb2RlLkNPTU1FUkNJQUwsICdDb21tZXJjaWFsJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEZsaWdodFR5cGVDb2RlLkNPTU1FUkNJQUxfSUZSLCAnQ29tbWVyY2lhbCBJZnInKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT04sICdJbnN0cnVjdGlvbicpO1xuXHRcblx0cmVzdWx0LnNldChGbGlnaHRUeXBlQ29kZS5JTlNUUlVDVElPTl9DVkZSLCAnSW5zdHJ1Y3Rpb24gQ3ZmcicpO1xuXHRcblx0cmVzdWx0LnNldChGbGlnaHRUeXBlQ29kZS5JTlNUUlVDVElPTl9JRlIsICdJbnN0cnVjdGlvbiBJZnInKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0VHlwZUNvZGUuSU5TVFJVQ1RJT05fTkFWLCAnSW5zdHJ1Y3Rpb24gTmF2Jyk7XG5cdFxuXHRyZXN1bHQuc2V0KEZsaWdodFR5cGVDb2RlLklOU1RSVUNUSU9OX05JR0hULCAnSW5zdHJ1Y3Rpb24gTmlnaHQnKTtcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19