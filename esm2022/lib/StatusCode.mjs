import { Tuple } from '.';
// StatusCode represents a general workflow status: PENDING | IN_PROGRESS | DONE ...
export var StatusCode;
(function (StatusCode) {
    // Undefined [0] 
    StatusCode[StatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Flow not started yet [1] 
    StatusCode[StatusCode["PENDING"] = 1] = "PENDING";
    // Flow in process [2] 
    StatusCode[StatusCode["IN_PROCESS"] = 2] = "IN_PROCESS";
    // Flow completed [3] 
    StatusCode[StatusCode["COMPLETED"] = 3] = "COMPLETED";
    // Flow cancelled by user [4] 
    StatusCode[StatusCode["CANCELLED"] = 4] = "CANCELLED";
    // Flow automatically cancelled by the system [5] 
    StatusCode[StatusCode["AUTO_CANCELLED"] = 5] = "AUTO_CANCELLED";
})(StatusCode || (StatusCode = {}));
// Return list of StatusCode values and their display names
export function GetStatusCodes() {
    let result = [];
    result.push(new Tuple(StatusCode.PENDING, 'StatusCode.PENDING'));
    result.push(new Tuple(StatusCode.IN_PROCESS, 'StatusCode.IN_PROCESS'));
    result.push(new Tuple(StatusCode.COMPLETED, 'StatusCode.COMPLETED'));
    result.push(new Tuple(StatusCode.CANCELLED, 'StatusCode.CANCELLED'));
    result.push(new Tuple(StatusCode.AUTO_CANCELLED, 'StatusCode.AUTO_CANCELLED'));
    return result;
}
// Return map of StatusCode values and their display names
export function MapStatusCodes() {
    let result = new Map();
    result.set(StatusCode.UNDEFINED, 'Undefined');
    result.set(StatusCode.PENDING, 'Pending');
    result.set(StatusCode.IN_PROCESS, 'In Process');
    result.set(StatusCode.COMPLETED, 'Completed');
    result.set(StatusCode.CANCELLED, 'Cancelled');
    result.set(StatusCode.AUTO_CANCELLED, 'Auto Cancelled');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdHVzQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL1N0YXR1c0NvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUcxQixvRkFBb0Y7QUFDcEYsTUFBTSxDQUFOLElBQVksVUFvQlg7QUFwQkQsV0FBWSxVQUFVO0lBRWxCLGlCQUFpQjtJQUNqQixxREFBYSxDQUFBO0lBRWIsNEJBQTRCO0lBQzVCLGlEQUFXLENBQUE7SUFFWCx1QkFBdUI7SUFDdkIsdURBQWMsQ0FBQTtJQUVkLHNCQUFzQjtJQUN0QixxREFBYSxDQUFBO0lBRWIsOEJBQThCO0lBQzlCLHFEQUFhLENBQUE7SUFFYixrREFBa0Q7SUFDbEQsK0RBQWtCLENBQUE7QUFFdEIsQ0FBQyxFQXBCVyxVQUFVLEtBQVYsVUFBVSxRQW9CckI7QUFFRCwyREFBMkQ7QUFDM0QsTUFBTSxVQUFVLGNBQWM7SUFDN0IsSUFBSSxNQUFNLEdBQWlDLEVBQUUsQ0FBQztJQUc5QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFxQixVQUFVLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQTtJQUVwRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFxQixVQUFVLENBQUMsVUFBVSxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtJQUUxRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFxQixVQUFVLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtJQUV4RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFxQixVQUFVLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtJQUV4RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFxQixVQUFVLENBQUMsY0FBYyxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUcvRixPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsMERBQTBEO0FBQzFELE1BQU0sVUFBVSxjQUFjO0lBQzFCLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO0lBRzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFHckQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgVHVwbGUgfSBmcm9tICcuJztcblxuXG4vLyBTdGF0dXNDb2RlIHJlcHJlc2VudHMgYSBnZW5lcmFsIHdvcmtmbG93IHN0YXR1czogUEVORElORyB8IElOX1BST0dSRVNTIHwgRE9ORSAuLi5cbmV4cG9ydCBlbnVtIFN0YXR1c0NvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBGbG93IG5vdCBzdGFydGVkIHlldCBbMV0gXG4gICAgUEVORElORyA9IDEsXG4gXG4gICAgLy8gRmxvdyBpbiBwcm9jZXNzIFsyXSBcbiAgICBJTl9QUk9DRVNTID0gMixcbiBcbiAgICAvLyBGbG93IGNvbXBsZXRlZCBbM10gXG4gICAgQ09NUExFVEVEID0gMyxcbiBcbiAgICAvLyBGbG93IGNhbmNlbGxlZCBieSB1c2VyIFs0XSBcbiAgICBDQU5DRUxMRUQgPSA0LFxuIFxuICAgIC8vIEZsb3cgYXV0b21hdGljYWxseSBjYW5jZWxsZWQgYnkgdGhlIHN5c3RlbSBbNV0gXG4gICAgQVVUT19DQU5DRUxMRUQgPSA1LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBTdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldFN0YXR1c0NvZGVzKCkgOiBUdXBsZTxTdGF0dXNDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8U3RhdHVzQ29kZSwgc3RyaW5nPltdID0gW107XG5cbiAgICBcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPFN0YXR1c0NvZGUsIHN0cmluZz4oU3RhdHVzQ29kZS5QRU5ESU5HLCAnU3RhdHVzQ29kZS5QRU5ESU5HJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8U3RhdHVzQ29kZSwgc3RyaW5nPihTdGF0dXNDb2RlLklOX1BST0NFU1MsICdTdGF0dXNDb2RlLklOX1BST0NFU1MnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxTdGF0dXNDb2RlLCBzdHJpbmc+KFN0YXR1c0NvZGUuQ09NUExFVEVELCAnU3RhdHVzQ29kZS5DT01QTEVURUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxTdGF0dXNDb2RlLCBzdHJpbmc+KFN0YXR1c0NvZGUuQ0FOQ0VMTEVELCAnU3RhdHVzQ29kZS5DQU5DRUxMRUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxTdGF0dXNDb2RlLCBzdHJpbmc+KFN0YXR1c0NvZGUuQVVUT19DQU5DRUxMRUQsICdTdGF0dXNDb2RlLkFVVE9fQ0FOQ0VMTEVEJykpXG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUmV0dXJuIG1hcCBvZiBTdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIE1hcFN0YXR1c0NvZGVzKCkgOiBNYXA8U3RhdHVzQ29kZSwgc3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8U3RhdHVzQ29kZSwgc3RyaW5nPigpO1xuXG4gICAgXG5cdHJlc3VsdC5zZXQoU3RhdHVzQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoU3RhdHVzQ29kZS5QRU5ESU5HLCAnUGVuZGluZycpO1xuXHRcblx0cmVzdWx0LnNldChTdGF0dXNDb2RlLklOX1BST0NFU1MsICdJbiBQcm9jZXNzJyk7XG5cdFxuXHRyZXN1bHQuc2V0KFN0YXR1c0NvZGUuQ09NUExFVEVELCAnQ29tcGxldGVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KFN0YXR1c0NvZGUuQ0FOQ0VMTEVELCAnQ2FuY2VsbGVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KFN0YXR1c0NvZGUuQVVUT19DQU5DRUxMRUQsICdBdXRvIENhbmNlbGxlZCcpO1xuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=