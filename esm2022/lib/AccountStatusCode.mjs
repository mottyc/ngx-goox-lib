import { Tuple } from '.';
// AccountStatusCode represents the account status: ACTIVE | INACTIVE | BLOCKED ...
export var AccountStatusCode;
(function (AccountStatusCode) {
    // Undefined [0] 
    AccountStatusCode[AccountStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Active account in the system [1] 
    AccountStatusCode[AccountStatusCode["ACTIVE"] = 1] = "ACTIVE";
    // Inactive account in the system [2] 
    AccountStatusCode[AccountStatusCode["INACTIVE"] = 2] = "INACTIVE";
    // Blocked account [3] 
    AccountStatusCode[AccountStatusCode["BLOCKED"] = 3] = "BLOCKED";
    // Suspended account (about to be deleted) [4] 
    AccountStatusCode[AccountStatusCode["SUSPENDED"] = 4] = "SUSPENDED";
})(AccountStatusCode || (AccountStatusCode = {}));
// Return list of AccountStatusCode values and their display names
export function GetAccountStatusCodes() {
    let result = [];
    result.push(new Tuple(AccountStatusCode.ACTIVE, 'AccountStatusCode.ACTIVE'));
    result.push(new Tuple(AccountStatusCode.INACTIVE, 'AccountStatusCode.INACTIVE'));
    result.push(new Tuple(AccountStatusCode.BLOCKED, 'AccountStatusCode.BLOCKED'));
    result.push(new Tuple(AccountStatusCode.SUSPENDED, 'AccountStatusCode.SUSPENDED'));
    return result;
}
// Return map of AccountStatusCode values and their display names
export function MapAccountStatusCodes() {
    let result = new Map();
    result.set(AccountStatusCode.UNDEFINED, 'Undefined');
    result.set(AccountStatusCode.ACTIVE, 'Active');
    result.set(AccountStatusCode.INACTIVE, 'Inactive');
    result.set(AccountStatusCode.BLOCKED, 'Blocked');
    result.set(AccountStatusCode.SUSPENDED, 'Suspended');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3VudFN0YXR1c0NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9BY2NvdW50U3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLG1GQUFtRjtBQUNuRixNQUFNLENBQU4sSUFBWSxpQkFpQlg7QUFqQkQsV0FBWSxpQkFBaUI7SUFFekIsaUJBQWlCO0lBQ2pCLG1FQUFhLENBQUE7SUFFYixvQ0FBb0M7SUFDcEMsNkRBQVUsQ0FBQTtJQUVWLHNDQUFzQztJQUN0QyxpRUFBWSxDQUFBO0lBRVosdUJBQXVCO0lBQ3ZCLCtEQUFXLENBQUE7SUFFWCwrQ0FBK0M7SUFDL0MsbUVBQWEsQ0FBQTtBQUVqQixDQUFDLEVBakJXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFpQjVCO0FBRUQsa0VBQWtFO0FBQ2xFLE1BQU0sVUFBVSxxQkFBcUI7SUFDcEMsSUFBSSxNQUFNLEdBQXdDLEVBQUUsQ0FBQztJQUdyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUE0QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBRXZHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTRCLGlCQUFpQixDQUFDLFFBQVEsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLENBQUE7SUFFM0csTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBNEIsaUJBQWlCLENBQUMsT0FBTyxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUV6RyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUE0QixpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFBO0lBRzFHLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxpRUFBaUU7QUFDakUsTUFBTSxVQUFVLHFCQUFxQjtJQUNqQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBNkIsQ0FBQztJQUdyRCxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVyRCxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUUvQyxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRCxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUdsRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBUdXBsZSB9IGZyb20gJy4nO1xuXG5cbi8vIEFjY291bnRTdGF0dXNDb2RlIHJlcHJlc2VudHMgdGhlIGFjY291bnQgc3RhdHVzOiBBQ1RJVkUgfCBJTkFDVElWRSB8IEJMT0NLRUQgLi4uXG5leHBvcnQgZW51bSBBY2NvdW50U3RhdHVzQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIEFjdGl2ZSBhY2NvdW50IGluIHRoZSBzeXN0ZW0gWzFdIFxuICAgIEFDVElWRSA9IDEsXG4gXG4gICAgLy8gSW5hY3RpdmUgYWNjb3VudCBpbiB0aGUgc3lzdGVtIFsyXSBcbiAgICBJTkFDVElWRSA9IDIsXG4gXG4gICAgLy8gQmxvY2tlZCBhY2NvdW50IFszXSBcbiAgICBCTE9DS0VEID0gMyxcbiBcbiAgICAvLyBTdXNwZW5kZWQgYWNjb3VudCAoYWJvdXQgdG8gYmUgZGVsZXRlZCkgWzRdIFxuICAgIFNVU1BFTkRFRCA9IDQsXG4gXG59XG5cbi8vIFJldHVybiBsaXN0IG9mIEFjY291bnRTdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldEFjY291bnRTdGF0dXNDb2RlcygpIDogVHVwbGU8QWNjb3VudFN0YXR1c0NvZGUsIHN0cmluZz5bXSB7XG5cdGxldCByZXN1bHQgOiBUdXBsZTxBY2NvdW50U3RhdHVzQ29kZSwgc3RyaW5nPltdID0gW107XG5cbiAgICBcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFjY291bnRTdGF0dXNDb2RlLCBzdHJpbmc+KEFjY291bnRTdGF0dXNDb2RlLkFDVElWRSwgJ0FjY291bnRTdGF0dXNDb2RlLkFDVElWRScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFjY291bnRTdGF0dXNDb2RlLCBzdHJpbmc+KEFjY291bnRTdGF0dXNDb2RlLklOQUNUSVZFLCAnQWNjb3VudFN0YXR1c0NvZGUuSU5BQ1RJVkUnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxBY2NvdW50U3RhdHVzQ29kZSwgc3RyaW5nPihBY2NvdW50U3RhdHVzQ29kZS5CTE9DS0VELCAnQWNjb3VudFN0YXR1c0NvZGUuQkxPQ0tFRCcpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPEFjY291bnRTdGF0dXNDb2RlLCBzdHJpbmc+KEFjY291bnRTdGF0dXNDb2RlLlNVU1BFTkRFRCwgJ0FjY291bnRTdGF0dXNDb2RlLlNVU1BFTkRFRCcpKVxuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFJldHVybiBtYXAgb2YgQWNjb3VudFN0YXR1c0NvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gTWFwQWNjb3VudFN0YXR1c0NvZGVzKCkgOiBNYXA8QWNjb3VudFN0YXR1c0NvZGUsIHN0cmluZz4ge1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPEFjY291bnRTdGF0dXNDb2RlLCBzdHJpbmc+KCk7XG5cbiAgICBcblx0cmVzdWx0LnNldChBY2NvdW50U3RhdHVzQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoQWNjb3VudFN0YXR1c0NvZGUuQUNUSVZFLCAnQWN0aXZlJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEFjY291bnRTdGF0dXNDb2RlLklOQUNUSVZFLCAnSW5hY3RpdmUnKTtcblx0XG5cdHJlc3VsdC5zZXQoQWNjb3VudFN0YXR1c0NvZGUuQkxPQ0tFRCwgJ0Jsb2NrZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoQWNjb3VudFN0YXR1c0NvZGUuU1VTUEVOREVELCAnU3VzcGVuZGVkJyk7XG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==