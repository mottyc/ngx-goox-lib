import { Tuple } from '.';
// MessageTypeCode represents the message type: ALERT | INFO | POLICY
export var MessageTypeCode;
(function (MessageTypeCode) {
    // Undefined [0] 
    MessageTypeCode[MessageTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Company information [1] 
    MessageTypeCode[MessageTypeCode["INFO"] = 1] = "INFO";
    // Memorandum [2] 
    MessageTypeCode[MessageTypeCode["MEMO"] = 2] = "MEMO";
    // Distribution and Reissue procedures [3] 
    MessageTypeCode[MessageTypeCode["EXTERNAL_PROCEDURE"] = 3] = "EXTERNAL_PROCEDURE";
    // Internal procedures [4] 
    MessageTypeCode[MessageTypeCode["INTERNAL_PROCEDURE"] = 4] = "INTERNAL_PROCEDURE";
    // Incident_OR_Hazard Report_Low_Human_Mitigation required [5] 
    MessageTypeCode[MessageTypeCode["INCIDENT"] = 5] = "INCIDENT";
    // Policy and Procedural Changes [6] 
    MessageTypeCode[MessageTypeCode["POLICY"] = 6] = "POLICY";
    // Repair Stations Audit_IANR_OPS 344_2 [7] 
    MessageTypeCode[MessageTypeCode["REPAIR"] = 7] = "REPAIR";
})(MessageTypeCode || (MessageTypeCode = {}));
// Return list of MessageTypeCode values and their display names
export function GetMessageTypeCodes() {
    let result = [];
    result.push(new Tuple(MessageTypeCode.INFO, 'MessageTypeCode.INFO'));
    result.push(new Tuple(MessageTypeCode.MEMO, 'MessageTypeCode.MEMO'));
    result.push(new Tuple(MessageTypeCode.EXTERNAL_PROCEDURE, 'MessageTypeCode.EXTERNAL_PROCEDURE'));
    result.push(new Tuple(MessageTypeCode.INTERNAL_PROCEDURE, 'MessageTypeCode.INTERNAL_PROCEDURE'));
    result.push(new Tuple(MessageTypeCode.INCIDENT, 'MessageTypeCode.INCIDENT'));
    result.push(new Tuple(MessageTypeCode.POLICY, 'MessageTypeCode.POLICY'));
    result.push(new Tuple(MessageTypeCode.REPAIR, 'MessageTypeCode.REPAIR'));
    return result;
}
// Return map of MessageTypeCode values and their display names
export function MapMessageTypeCodes() {
    let result = new Map();
    result.set(MessageTypeCode.UNDEFINED, 'Undefined');
    result.set(MessageTypeCode.INFO, 'Info');
    result.set(MessageTypeCode.MEMO, 'Memo');
    result.set(MessageTypeCode.EXTERNAL_PROCEDURE, 'External Procedure');
    result.set(MessageTypeCode.INTERNAL_PROCEDURE, 'Internal Procedure');
    result.set(MessageTypeCode.INCIDENT, 'Incident');
    result.set(MessageTypeCode.POLICY, 'Policy');
    result.set(MessageTypeCode.REPAIR, 'Repair');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVR5cGVDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvb3gtbGliL3NyYy9saWIvTWVzc2FnZVR5cGVDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFHMUIscUVBQXFFO0FBQ3JFLE1BQU0sQ0FBTixJQUFZLGVBMEJYO0FBMUJELFdBQVksZUFBZTtJQUV2QixpQkFBaUI7SUFDakIsK0RBQWEsQ0FBQTtJQUViLDJCQUEyQjtJQUMzQixxREFBUSxDQUFBO0lBRVIsa0JBQWtCO0lBQ2xCLHFEQUFRLENBQUE7SUFFUiwyQ0FBMkM7SUFDM0MsaUZBQXNCLENBQUE7SUFFdEIsMkJBQTJCO0lBQzNCLGlGQUFzQixDQUFBO0lBRXRCLCtEQUErRDtJQUMvRCw2REFBWSxDQUFBO0lBRVoscUNBQXFDO0lBQ3JDLHlEQUFVLENBQUE7SUFFViw0Q0FBNEM7SUFDNUMseURBQVUsQ0FBQTtBQUVkLENBQUMsRUExQlcsZUFBZSxLQUFmLGVBQWUsUUEwQjFCO0FBRUQsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxtQkFBbUI7SUFDbEMsSUFBSSxNQUFNLEdBQXNDLEVBQUUsQ0FBQztJQUduRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtJQUU3RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtJQUU3RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsa0JBQWtCLEVBQUUsb0NBQW9DLENBQUMsQ0FBQyxDQUFBO0lBRXpILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTBCLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDLENBQUE7SUFFekgsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBMEIsZUFBZSxDQUFDLFFBQVEsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDLENBQUE7SUFFckcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBMEIsZUFBZSxDQUFDLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7SUFFakcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBMEIsZUFBZSxDQUFDLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7SUFHOUYsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsbUJBQW1CO0lBQy9CLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0lBR25ELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXpDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFckUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUVyRSxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUcxQyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBUdXBsZSB9IGZyb20gJy4nO1xuXG5cbi8vIE1lc3NhZ2VUeXBlQ29kZSByZXByZXNlbnRzIHRoZSBtZXNzYWdlIHR5cGU6IEFMRVJUIHwgSU5GTyB8IFBPTElDWVxuZXhwb3J0IGVudW0gTWVzc2FnZVR5cGVDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gQ29tcGFueSBpbmZvcm1hdGlvbiBbMV0gXG4gICAgSU5GTyA9IDEsXG4gXG4gICAgLy8gTWVtb3JhbmR1bSBbMl0gXG4gICAgTUVNTyA9IDIsXG4gXG4gICAgLy8gRGlzdHJpYnV0aW9uIGFuZCBSZWlzc3VlIHByb2NlZHVyZXMgWzNdIFxuICAgIEVYVEVSTkFMX1BST0NFRFVSRSA9IDMsXG4gXG4gICAgLy8gSW50ZXJuYWwgcHJvY2VkdXJlcyBbNF0gXG4gICAgSU5URVJOQUxfUFJPQ0VEVVJFID0gNCxcbiBcbiAgICAvLyBJbmNpZGVudF9PUl9IYXphcmQgUmVwb3J0X0xvd19IdW1hbl9NaXRpZ2F0aW9uIHJlcXVpcmVkIFs1XSBcbiAgICBJTkNJREVOVCA9IDUsXG4gXG4gICAgLy8gUG9saWN5IGFuZCBQcm9jZWR1cmFsIENoYW5nZXMgWzZdIFxuICAgIFBPTElDWSA9IDYsXG4gXG4gICAgLy8gUmVwYWlyIFN0YXRpb25zIEF1ZGl0X0lBTlJfT1BTIDM0NF8yIFs3XSBcbiAgICBSRVBBSVIgPSA3LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBNZXNzYWdlVHlwZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0TWVzc2FnZVR5cGVDb2RlcygpIDogVHVwbGU8TWVzc2FnZVR5cGVDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8TWVzc2FnZVR5cGVDb2RlLCBzdHJpbmc+W10gPSBbXTtcblxuICAgIFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8TWVzc2FnZVR5cGVDb2RlLCBzdHJpbmc+KE1lc3NhZ2VUeXBlQ29kZS5JTkZPLCAnTWVzc2FnZVR5cGVDb2RlLklORk8nKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxNZXNzYWdlVHlwZUNvZGUsIHN0cmluZz4oTWVzc2FnZVR5cGVDb2RlLk1FTU8sICdNZXNzYWdlVHlwZUNvZGUuTUVNTycpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPE1lc3NhZ2VUeXBlQ29kZSwgc3RyaW5nPihNZXNzYWdlVHlwZUNvZGUuRVhURVJOQUxfUFJPQ0VEVVJFLCAnTWVzc2FnZVR5cGVDb2RlLkVYVEVSTkFMX1BST0NFRFVSRScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPE1lc3NhZ2VUeXBlQ29kZSwgc3RyaW5nPihNZXNzYWdlVHlwZUNvZGUuSU5URVJOQUxfUFJPQ0VEVVJFLCAnTWVzc2FnZVR5cGVDb2RlLklOVEVSTkFMX1BST0NFRFVSRScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPE1lc3NhZ2VUeXBlQ29kZSwgc3RyaW5nPihNZXNzYWdlVHlwZUNvZGUuSU5DSURFTlQsICdNZXNzYWdlVHlwZUNvZGUuSU5DSURFTlQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxNZXNzYWdlVHlwZUNvZGUsIHN0cmluZz4oTWVzc2FnZVR5cGVDb2RlLlBPTElDWSwgJ01lc3NhZ2VUeXBlQ29kZS5QT0xJQ1knKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxNZXNzYWdlVHlwZUNvZGUsIHN0cmluZz4oTWVzc2FnZVR5cGVDb2RlLlJFUEFJUiwgJ01lc3NhZ2VUeXBlQ29kZS5SRVBBSVInKSlcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBSZXR1cm4gbWFwIG9mIE1lc3NhZ2VUeXBlQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBNZXNzYWdlVHlwZUNvZGVzKCkgOiBNYXA8TWVzc2FnZVR5cGVDb2RlLCBzdHJpbmc+IHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxNZXNzYWdlVHlwZUNvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KE1lc3NhZ2VUeXBlQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoTWVzc2FnZVR5cGVDb2RlLklORk8sICdJbmZvJyk7XG5cdFxuXHRyZXN1bHQuc2V0KE1lc3NhZ2VUeXBlQ29kZS5NRU1PLCAnTWVtbycpO1xuXHRcblx0cmVzdWx0LnNldChNZXNzYWdlVHlwZUNvZGUuRVhURVJOQUxfUFJPQ0VEVVJFLCAnRXh0ZXJuYWwgUHJvY2VkdXJlJyk7XG5cdFxuXHRyZXN1bHQuc2V0KE1lc3NhZ2VUeXBlQ29kZS5JTlRFUk5BTF9QUk9DRURVUkUsICdJbnRlcm5hbCBQcm9jZWR1cmUnKTtcblx0XG5cdHJlc3VsdC5zZXQoTWVzc2FnZVR5cGVDb2RlLklOQ0lERU5ULCAnSW5jaWRlbnQnKTtcblx0XG5cdHJlc3VsdC5zZXQoTWVzc2FnZVR5cGVDb2RlLlBPTElDWSwgJ1BvbGljeScpO1xuXHRcblx0cmVzdWx0LnNldChNZXNzYWdlVHlwZUNvZGUuUkVQQUlSLCAnUmVwYWlyJyk7XG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==