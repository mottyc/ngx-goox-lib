import { BaseEntity } from '.';
import { ColumnDef } from '.';
// Contact entity is a billing account in the system
export class Contact extends BaseEntity {
}
export function GetContactColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("firstName", "string", ""));
    result.push(new ColumnDef("lastName", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("title", "string", ""));
    result.push(new ColumnDef("birthDay", "number", "datetime"));
    result.push(new ColumnDef("status", "AccountStatusCode", ""));
    result.push(new ColumnDef("phone", "string", ""));
    result.push(new ColumnDef("fax", "string", ""));
    result.push(new ColumnDef("mobile", "string", ""));
    result.push(new ColumnDef("primaryAddress", "Address", ""));
    result.push(new ColumnDef("singleEngineHours", "number", ""));
    result.push(new ColumnDef("dualEngineHours", "number", ""));
    result.push(new ColumnDef("totalFlightHours", "number", ""));
    result.push(new ColumnDef("groups", "string", ""));
    result.push(new ColumnDef("idNumber", "string", ""));
    result.push(new ColumnDef("startToFlyDate", "number", "datetime"));
    result.push(new ColumnDef("authorizedToFlyBy", "string", ""));
    result.push(new ColumnDef("authorizedPhotographyBy", "string", ""));
    result.push(new ColumnDef("pilotLicense", "string", ""));
    result.push(new ColumnDef("licenseTypes", "string", ""));
    result.push(new ColumnDef("licenseGroup", "string", ""));
    result.push(new ColumnDef("medicalCertClass", "string", ""));
    result.push(new ColumnDef("validations", "ValidationFlag", ""));
    result.push(new ColumnDef("isPilot", "boolean", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,