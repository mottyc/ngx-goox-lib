import { BaseEntityEx } from '.';
import { ColumnDef } from '.';
// Contact entity is a billing account in the system
export class Contact extends BaseEntityEx {
    // Write dynamic props getter
    prop(field) {
        if (!this.props) {
            return "";
        }
        const val = this.props.get(field);
        return String(val);
    }
}
export function GetContactColumnsDef() {
    let result = [];
    result.push(new ColumnDef("id", "string", ""));
    result.push(new ColumnDef("createdOn", "number", "datetime"));
    result.push(new ColumnDef("updatedOn", "number", "datetime"));
    result.push(new ColumnDef("firstName", "string", ""));
    result.push(new ColumnDef("lastName", "string", ""));
    result.push(new ColumnDef("description", "string", ""));
    result.push(new ColumnDef("title", "string", ""));
    result.push(new ColumnDef("birthDay", "number", "datetime"));
    result.push(new ColumnDef("status", "AccountStatusCode", ""));
    result.push(new ColumnDef("phone", "string", ""));
    result.push(new ColumnDef("fax", "string", ""));
    result.push(new ColumnDef("mobile", "string", ""));
    result.push(new ColumnDef("primaryAddress", "Address", ""));
    result.push(new ColumnDef("singleEngineHours", "number", ""));
    result.push(new ColumnDef("dualEngineHours", "number", ""));
    result.push(new ColumnDef("totalFlightHours", "number", ""));
    result.push(new ColumnDef("groups", "string", ""));
    result.push(new ColumnDef("idNumber", "string", ""));
    result.push(new ColumnDef("startToFlyDate", "number", "datetime"));
    result.push(new ColumnDef("authorizedToFlyBy", "string", ""));
    result.push(new ColumnDef("authorizedPhotographyBy", "string", ""));
    result.push(new ColumnDef("pilotLicense", "string", ""));
    result.push(new ColumnDef("licenseTypes", "string", ""));
    result.push(new ColumnDef("licenseGroup", "string", ""));
    result.push(new ColumnDef("medicalCertClass", "string", ""));
    result.push(new ColumnDef("validations", "ValidationFlag", ""));
    result.push(new ColumnDef("isPilot", "boolean", ""));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL0NvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBTTlCLG9EQUFvRDtBQUNwRCxNQUFNLE9BQU8sT0FBUSxTQUFRLFlBQVk7SUE2RXhDLDZCQUE2QjtJQUN0QixJQUFJLENBQUMsS0FBYTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLE9BQU8sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25CLENBQUM7Q0FHRDtBQUdELE1BQU0sVUFBVSxvQkFBb0I7SUFDaEMsSUFBSSxNQUFNLEdBQWlCLEVBQUUsQ0FBQztJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FB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QUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBR3JELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgVmFsaWRhdGlvbkZsYWcgfSBmcm9tICcuJztcbmltcG9ydCB7IEJhc2VFbnRpdHlFeCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQ29sdW1uRGVmIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBBY2NvdW50U3RhdHVzQ29kZSB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4nO1xuXG5cblxuLy8gQ29udGFjdCBlbnRpdHkgaXMgYSBiaWxsaW5nIGFjY291bnQgaW4gdGhlIHN5c3RlbVxuZXhwb3J0IGNsYXNzIENvbnRhY3QgZXh0ZW5kcyBCYXNlRW50aXR5RXgge1xuIFxuICAgIC8vIEZpcnN0IG5hbWUgXG4gICAgcHVibGljIGZpcnN0TmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIExhc3QgbmFtZSBcbiAgICBwdWJsaWMgbGFzdE5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBDb250YWN0IGRlc2NyaXB0aW9uIFxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIFRpdGxlIGluIHRoZSBhY2NvdW50IFxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuIFxuICAgIC8vIENvbnRhY3QgYmlydGhkYXkgXG4gICAgcHVibGljIGJpcnRoRGF5OiBudW1iZXI7XG4gXG4gICAgLy8gQ29udGFjdCBzdGF0dXM6IFVOREVGSU5FRCB8IEFDVElWRSB8IElOQUNUSVZFIHwgQkxPQ0tFRCB8IFNVU1BFTkRFIFxuICAgIHB1YmxpYyBzdGF0dXM6IEFjY291bnRTdGF0dXNDb2RlO1xuIFxuICAgIC8vIE9mZmljZSAvIExhbmRsaW5lIHBob25lIFxuICAgIHB1YmxpYyBwaG9uZTogc3RyaW5nO1xuIFxuICAgIC8vIE9mZmljZSAvIExhbmRsaW5lIGZheCBcbiAgICBwdWJsaWMgZmF4OiBzdHJpbmc7XG4gXG4gICAgLy8gTW9iaWxlIHBob25lIFxuICAgIHB1YmxpYyBtb2JpbGU6IHN0cmluZztcbiBcbiAgICAvLyBQcmltYXJ5IGFkZHJlc3MgXG4gICAgcHVibGljIHByaW1hcnlBZGRyZXNzOiBBZGRyZXNzO1xuIFxuICAgIC8vIFRvdGFsIHNpbmdsZSBlbmdpbmUgaG91cnMgXG4gICAgcHVibGljIHNpbmdsZUVuZ2luZUhvdXJzOiBudW1iZXI7XG4gXG4gICAgLy8gVG90YWwgZHVhbCBlbmdpbmUgaG91cnMgXG4gICAgcHVibGljIGR1YWxFbmdpbmVIb3VyczogbnVtYmVyO1xuIFxuICAgIC8vIFRvdGFsIGZsaWdodCBob3VycyBcbiAgICBwdWJsaWMgdG90YWxGbGlnaHRIb3VyczogbnVtYmVyO1xuIFxuICAgIC8vIENvbnRhY3QgZ3JvdXBzIFxuICAgIHB1YmxpYyBncm91cHM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIElEIG51bWJlciBcbiAgICBwdWJsaWMgaWROdW1iZXI6IHN0cmluZztcbiBcbiAgICAvLyBTdGFydCB0byBmbHkgb24gW2Vwb2NoIHRpbWUgbWlsbGlzZWNvbmRzXSBcbiAgICBwdWJsaWMgc3RhcnRUb0ZseURhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBBdXRob3JpemVkIHRvIGZseSBieSB1c2VyIGF0IHRpbWUgXG4gICAgcHVibGljIGF1dGhvcml6ZWRUb0ZseUJ5OiBzdHJpbmc7XG4gXG4gICAgLy8gQXV0aG9yaXplZCBwaG90b2dyYXBoZXIgYnkgdXNlciBhdCB0aW1lVmFsaWRhdGlvbnMgXG4gICAgcHVibGljIGF1dGhvcml6ZWRQaG90b2dyYXBoeUJ5OiBzdHJpbmc7XG4gXG4gICAgLy8gUGlsb3QgbGljZW5zZSBudW1iZXIgXG4gICAgcHVibGljIHBpbG90TGljZW5zZTogc3RyaW5nO1xuIFxuICAgIC8vIFBpbG90IGxpY2Vuc2UgdHlwZSBcbiAgICBwdWJsaWMgbGljZW5zZVR5cGVzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBQaWxvdCBsaWNlbnNlIGdyb3VwIFxuICAgIHB1YmxpYyBsaWNlbnNlR3JvdXA6IHN0cmluZztcbiBcbiAgICAvLyBNZWRpY2FsIGNlcnRpZmljYXRlIGNsYXNzIFxuICAgIHB1YmxpYyBtZWRpY2FsQ2VydENsYXNzOiBzdHJpbmc7XG4gXG4gICAgLy8gRW51bSBmbGFncyAtIGxpc3Qgb2YgY2VydGlmaWNhdGlvbnMgYW5kIHZhbGlkYXRpb25zIFxuICAgIHB1YmxpYyB2YWxpZGF0aW9uczogVmFsaWRhdGlvbkZsYWc7XG4gXG4gICAgLy8gRmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgY29udGFjdCBpcyBhIHBpbG90IFxuICAgIHB1YmxpYyBpc1BpbG90OiBib29sZWFuO1xuIFxuIFxuXG4gXG5cdC8vIFdyaXRlIGR5bmFtaWMgcHJvcHMgZ2V0dGVyXG5cdHB1YmxpYyBwcm9wKGZpZWxkOiBzdHJpbmcpIDogYW55IHtcblx0XHRpZiAoIXRoaXMucHJvcHMpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRjb25zdCB2YWwgPSB0aGlzLnByb3BzLmdldChmaWVsZClcblx0XHRyZXR1cm4gU3RyaW5nKHZhbClcblx0fVxuIFxuXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIEdldENvbnRhY3RDb2x1bW5zRGVmKCkgOiBDb2x1bW5EZWZbXSB7XG4gICAgbGV0IHJlc3VsdCA6IENvbHVtbkRlZltdID0gW107XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJpZFwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJjcmVhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJ1cGRhdGVkT25cIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmaXJzdE5hbWVcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibGFzdE5hbWVcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZGVzY3JpcHRpb25cIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidGl0bGVcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiYmlydGhEYXlcIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJzdGF0dXNcIiwgXCJBY2NvdW50U3RhdHVzQ29kZVwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwaG9uZVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJmYXhcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibW9iaWxlXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInByaW1hcnlBZGRyZXNzXCIsIFwiQWRkcmVzc1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJzaW5nbGVFbmdpbmVIb3Vyc1wiLCBcIm51bWJlclwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJkdWFsRW5naW5lSG91cnNcIiwgXCJudW1iZXJcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwidG90YWxGbGlnaHRIb3Vyc1wiLCBcIm51bWJlclwiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJncm91cHNcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiaWROdW1iZXJcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwic3RhcnRUb0ZseURhdGVcIiwgXCJudW1iZXJcIiwgXCJkYXRldGltZVwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhdXRob3JpemVkVG9GbHlCeVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhdXRob3JpemVkUGhvdG9ncmFwaHlCeVwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwaWxvdExpY2Vuc2VcIiwgXCJzdHJpbmdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibGljZW5zZVR5cGVzXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxpY2Vuc2VHcm91cFwiLCBcInN0cmluZ1wiLCBcIlwiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJtZWRpY2FsQ2VydENsYXNzXCIsIFwic3RyaW5nXCIsIFwiXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInZhbGlkYXRpb25zXCIsIFwiVmFsaWRhdGlvbkZsYWdcIiwgXCJcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiaXNQaWxvdFwiLCBcImJvb2xlYW5cIiwgXCJcIikpO1xuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19