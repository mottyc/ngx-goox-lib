import { ColumnDef } from '.';
import { BaseEntity } from '.';
// Contact entity is a billing account in the system
export class Contact extends BaseEntity {
}
export function GetContactColumnsDef() {
    let result = [];
    result.push(new ColumnDef("firstName", "string"));
    result.push(new ColumnDef("lastName", "string"));
    result.push(new ColumnDef("description", "string"));
    result.push(new ColumnDef("title", "string"));
    result.push(new ColumnDef("phone", "string"));
    result.push(new ColumnDef("fax", "string"));
    result.push(new ColumnDef("mobile", "string"));
    result.push(new ColumnDef("groups", "string"));
    result.push(new ColumnDef("idNumber", "string"));
    result.push(new ColumnDef("authorizedToFlyBy", "string"));
    result.push(new ColumnDef("authorizedPhotographyBy", "string"));
    result.push(new ColumnDef("pilotLicense", "string"));
    result.push(new ColumnDef("licenseTypes", "string"));
    result.push(new ColumnDef("licenseGroup", "string"));
    result.push(new ColumnDef("medicalCertClass", "string"));
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb294LWxpYi9zcmMvbGliL0NvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUk5QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBSS9CLG9EQUFvRDtBQUNwRCxNQUFNLE9BQU8sT0FBUSxTQUFRLFVBQVU7Q0EyRXRDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxJQUFJLE1BQU0sR0FBaUIsRUFBRSxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFHOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFLL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRWpELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLHlCQUF5QixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBS3pELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29sdW1uRGVmIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBBY2NvdW50U3RhdHVzQ29kZSB9IGZyb20gJy4nO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4nO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkZsYWcgfSBmcm9tICcuJztcbmltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuJztcblxuXG5cbi8vIENvbnRhY3QgZW50aXR5IGlzIGEgYmlsbGluZyBhY2NvdW50IGluIHRoZSBzeXN0ZW1cbmV4cG9ydCBjbGFzcyBDb250YWN0IGV4dGVuZHMgQmFzZUVudGl0eSB7XG4gXG4gICAgLy8gRmlyc3QgbmFtZSBcbiAgICBwdWJsaWMgZmlyc3ROYW1lOiBzdHJpbmc7XG4gXG4gICAgLy8gTGFzdCBuYW1lIFxuICAgIHB1YmxpYyBsYXN0TmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIENvbnRhY3QgZGVzY3JpcHRpb24gXG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gXG4gICAgLy8gVGl0bGUgaW4gdGhlIGFjY291bnQgXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gXG4gICAgLy8gQ29udGFjdCBiaXJ0aGRheSBcbiAgICBwdWJsaWMgYmlydGhEYXk6IG51bWJlcjtcbiBcbiAgICAvLyBDb250YWN0IHN0YXR1czogVU5ERUZJTkVEIHwgQUNUSVZFIHwgSU5BQ1RJVkUgfCBCTE9DS0VEIHwgU1VTUEVOREUgXG4gICAgcHVibGljIHN0YXR1czogQWNjb3VudFN0YXR1c0NvZGU7XG4gXG4gICAgLy8gT2ZmaWNlIC8gTGFuZGxpbmUgcGhvbmUgXG4gICAgcHVibGljIHBob25lOiBzdHJpbmc7XG4gXG4gICAgLy8gT2ZmaWNlIC8gTGFuZGxpbmUgZmF4IFxuICAgIHB1YmxpYyBmYXg6IHN0cmluZztcbiBcbiAgICAvLyBNb2JpbGUgcGhvbmUgXG4gICAgcHVibGljIG1vYmlsZTogc3RyaW5nO1xuIFxuICAgIC8vIFByaW1hcnkgYWRkcmVzcyBcbiAgICBwdWJsaWMgcHJpbWFyeUFkZHJlc3M6IEFkZHJlc3M7XG4gXG4gICAgLy8gVG90YWwgc2luZ2xlIGVuZ2luZSBob3VycyBcbiAgICBwdWJsaWMgc2luZ2xlRW5naW5lSG91cnM6IG51bWJlcjtcbiBcbiAgICAvLyBUb3RhbCBkdWFsIGVuZ2luZSBob3VycyBcbiAgICBwdWJsaWMgZHVhbEVuZ2luZUhvdXJzOiBudW1iZXI7XG4gXG4gICAgLy8gVG90YWwgZmxpZ2h0IGhvdXJzIFxuICAgIHB1YmxpYyB0b3RhbEZsaWdodEhvdXJzOiBudW1iZXI7XG4gXG4gICAgLy8gQ29udGFjdCBncm91cHMgXG4gICAgcHVibGljIGdyb3Vwczogc3RyaW5nW107XG4gXG4gICAgLy8gSUQgbnVtYmVyIFxuICAgIHB1YmxpYyBpZE51bWJlcjogc3RyaW5nO1xuIFxuICAgIC8vIFN0YXJ0IHRvIGZseSBvbiBbZXBvY2ggdGltZSBtaWxsaXNlY29uZHNdIFxuICAgIHB1YmxpYyBzdGFydFRvRmx5RGF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIEF1dGhvcml6ZWQgdG8gZmx5IGJ5IHVzZXIgYXQgdGltZSBcbiAgICBwdWJsaWMgYXV0aG9yaXplZFRvRmx5Qnk6IHN0cmluZztcbiBcbiAgICAvLyBBdXRob3JpemVkIHBob3RvZ3JhcGhlciBieSB1c2VyIGF0IHRpbWVWYWxpZGF0aW9ucyBcbiAgICBwdWJsaWMgYXV0aG9yaXplZFBob3RvZ3JhcGh5Qnk6IHN0cmluZztcbiBcbiAgICAvLyBQaWxvdCBsaWNlbnNlIG51bWJlciBcbiAgICBwdWJsaWMgcGlsb3RMaWNlbnNlOiBzdHJpbmc7XG4gXG4gICAgLy8gUGlsb3QgbGljZW5zZSB0eXBlIFxuICAgIHB1YmxpYyBsaWNlbnNlVHlwZXM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFBpbG90IGxpY2Vuc2UgZ3JvdXAgXG4gICAgcHVibGljIGxpY2Vuc2VHcm91cDogc3RyaW5nO1xuIFxuICAgIC8vIE1lZGljYWwgY2VydGlmaWNhdGUgY2xhc3MgXG4gICAgcHVibGljIG1lZGljYWxDZXJ0Q2xhc3M6IHN0cmluZztcbiBcbiAgICAvLyBFbnVtIGZsYWdzIC0gbGlzdCBvZiBjZXJ0aWZpY2F0aW9ucyBhbmQgdmFsaWRhdGlvbnMgXG4gICAgcHVibGljIHZhbGlkYXRpb25zOiBWYWxpZGF0aW9uRmxhZztcbiBcbiAgICAvLyBGbGFnIGluZGljYXRpbmcgaWYgdGhpcyBjb250YWN0IGlzIGEgcGlsb3QgXG4gICAgcHVibGljIGlzUGlsb3Q6IGJvb2xlYW47XG4gXG4gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRDb250YWN0Q29sdW1uc0RlZigpIDogQ29sdW1uRGVmW10ge1xuICAgIGxldCByZXN1bHQgOiBDb2x1bW5EZWZbXSA9IFtdO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZmlyc3ROYW1lXCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxhc3ROYW1lXCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImRlc2NyaXB0aW9uXCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcInRpdGxlXCIsIFwic3RyaW5nXCIpKTtcblx0XG5cdFxuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwicGhvbmVcIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZmF4XCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcIm1vYmlsZVwiLCBcInN0cmluZ1wiKSk7XG5cdFxuXHRcblx0XG5cdFxuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwiZ3JvdXBzXCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImlkTnVtYmVyXCIsIFwic3RyaW5nXCIpKTtcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhdXRob3JpemVkVG9GbHlCeVwiLCBcInN0cmluZ1wiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJhdXRob3JpemVkUGhvdG9ncmFwaHlCeVwiLCBcInN0cmluZ1wiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJwaWxvdExpY2Vuc2VcIiwgXCJzdHJpbmdcIikpO1xuXHRyZXN1bHQucHVzaChuZXcgQ29sdW1uRGVmKFwibGljZW5zZVR5cGVzXCIsIFwic3RyaW5nXCIpKTtcblx0cmVzdWx0LnB1c2gobmV3IENvbHVtbkRlZihcImxpY2Vuc2VHcm91cFwiLCBcInN0cmluZ1wiKSk7XG5cdHJlc3VsdC5wdXNoKG5ldyBDb2x1bW5EZWYoXCJtZWRpY2FsQ2VydENsYXNzXCIsIFwic3RyaW5nXCIpKTtcblx0XG5cdFxuXHRcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuXG5cblxuIl19