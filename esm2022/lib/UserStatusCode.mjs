import { Tuple } from '.';
// UserStatusCode represents the user status: PENDING | ACTIVE | BLOCKED ...
export var UserStatusCode;
(function (UserStatusCode) {
    // Undefined [0] 
    UserStatusCode[UserStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // User is registered and pending verification [1] 
    UserStatusCode[UserStatusCode["PENDING"] = 1] = "PENDING";
    // Active user in the system [2] 
    UserStatusCode[UserStatusCode["ACTIVE"] = 2] = "ACTIVE";
    // Blocked user (only account system can unblock the user) [3] 
    UserStatusCode[UserStatusCode["BLOCKED"] = 3] = "BLOCKED";
    // Suspended user (about to be deleted) [4] 
    UserStatusCode[UserStatusCode["SUSPENDED"] = 4] = "SUSPENDED";
})(UserStatusCode || (UserStatusCode = {}));
// Return list of UserStatusCode values and their display names
export function GetUserStatusCodes() {
    let result = [];
    result.push(new Tuple(UserStatusCode.PENDING, 'UserStatusCode.PENDING'));
    result.push(new Tuple(UserStatusCode.ACTIVE, 'UserStatusCode.ACTIVE'));
    result.push(new Tuple(UserStatusCode.BLOCKED, 'UserStatusCode.BLOCKED'));
    result.push(new Tuple(UserStatusCode.SUSPENDED, 'UserStatusCode.SUSPENDED'));
    return result;
}
// Return map of UserStatusCode values and their display names
export function MapUserStatusCodes() {
    let result = new Map();
    result.set(UserStatusCode.UNDEFINED, 'Undefined');
    result.set(UserStatusCode.PENDING, 'Pending');
    result.set(UserStatusCode.ACTIVE, 'Active');
    result.set(UserStatusCode.BLOCKED, 'Blocked');
    result.set(UserStatusCode.SUSPENDED, 'Suspended');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclN0YXR1c0NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9Vc2VyU3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBRzFCLDRFQUE0RTtBQUM1RSxNQUFNLENBQU4sSUFBWSxjQWlCWDtBQWpCRCxXQUFZLGNBQWM7SUFFdEIsaUJBQWlCO0lBQ2pCLDZEQUFhLENBQUE7SUFFYixtREFBbUQ7SUFDbkQseURBQVcsQ0FBQTtJQUVYLGlDQUFpQztJQUNqQyx1REFBVSxDQUFBO0lBRVYsK0RBQStEO0lBQy9ELHlEQUFXLENBQUE7SUFFWCw0Q0FBNEM7SUFDNUMsNkRBQWEsQ0FBQTtBQUVqQixDQUFDLEVBakJXLGNBQWMsS0FBZCxjQUFjLFFBaUJ6QjtBQUVELCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsa0JBQWtCO0lBQ2pDLElBQUksTUFBTSxHQUFxQyxFQUFFLENBQUM7SUFHbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBeUIsY0FBYyxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7SUFFaEcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBeUIsY0FBYyxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQUE7SUFFOUYsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBeUIsY0FBYyxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7SUFFaEcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBeUIsY0FBYyxDQUFDLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDLENBQUE7SUFHakcsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELDhEQUE4RDtBQUM5RCxNQUFNLFVBQVUsa0JBQWtCO0lBQzlCLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO0lBR2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFHL0MsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgVHVwbGUgfSBmcm9tICcuJztcblxuXG4vLyBVc2VyU3RhdHVzQ29kZSByZXByZXNlbnRzIHRoZSB1c2VyIHN0YXR1czogUEVORElORyB8IEFDVElWRSB8IEJMT0NLRUQgLi4uXG5leHBvcnQgZW51bSBVc2VyU3RhdHVzQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIFVzZXIgaXMgcmVnaXN0ZXJlZCBhbmQgcGVuZGluZyB2ZXJpZmljYXRpb24gWzFdIFxuICAgIFBFTkRJTkcgPSAxLFxuIFxuICAgIC8vIEFjdGl2ZSB1c2VyIGluIHRoZSBzeXN0ZW0gWzJdIFxuICAgIEFDVElWRSA9IDIsXG4gXG4gICAgLy8gQmxvY2tlZCB1c2VyIChvbmx5IGFjY291bnQgc3lzdGVtIGNhbiB1bmJsb2NrIHRoZSB1c2VyKSBbM10gXG4gICAgQkxPQ0tFRCA9IDMsXG4gXG4gICAgLy8gU3VzcGVuZGVkIHVzZXIgKGFib3V0IHRvIGJlIGRlbGV0ZWQpIFs0XSBcbiAgICBTVVNQRU5ERUQgPSA0LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBVc2VyU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXRVc2VyU3RhdHVzQ29kZXMoKSA6IFR1cGxlPFVzZXJTdGF0dXNDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8VXNlclN0YXR1c0NvZGUsIHN0cmluZz5bXSA9IFtdO1xuXG4gICAgXG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxVc2VyU3RhdHVzQ29kZSwgc3RyaW5nPihVc2VyU3RhdHVzQ29kZS5QRU5ESU5HLCAnVXNlclN0YXR1c0NvZGUuUEVORElORycpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPFVzZXJTdGF0dXNDb2RlLCBzdHJpbmc+KFVzZXJTdGF0dXNDb2RlLkFDVElWRSwgJ1VzZXJTdGF0dXNDb2RlLkFDVElWRScpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPFVzZXJTdGF0dXNDb2RlLCBzdHJpbmc+KFVzZXJTdGF0dXNDb2RlLkJMT0NLRUQsICdVc2VyU3RhdHVzQ29kZS5CTE9DS0VEJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8VXNlclN0YXR1c0NvZGUsIHN0cmluZz4oVXNlclN0YXR1c0NvZGUuU1VTUEVOREVELCAnVXNlclN0YXR1c0NvZGUuU1VTUEVOREVEJykpXG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUmV0dXJuIG1hcCBvZiBVc2VyU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBVc2VyU3RhdHVzQ29kZXMoKSA6IE1hcDxVc2VyU3RhdHVzQ29kZSwgc3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8VXNlclN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KFVzZXJTdGF0dXNDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuXHRcblx0cmVzdWx0LnNldChVc2VyU3RhdHVzQ29kZS5QRU5ESU5HLCAnUGVuZGluZycpO1xuXHRcblx0cmVzdWx0LnNldChVc2VyU3RhdHVzQ29kZS5BQ1RJVkUsICdBY3RpdmUnKTtcblx0XG5cdHJlc3VsdC5zZXQoVXNlclN0YXR1c0NvZGUuQkxPQ0tFRCwgJ0Jsb2NrZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoVXNlclN0YXR1c0NvZGUuU1VTUEVOREVELCAnU3VzcGVuZGVkJyk7XG5cdFxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==