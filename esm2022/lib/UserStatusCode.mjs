// UserStatusCode represents the user status: PENDING | ACTIVE | BLOCKED ...
export var UserStatusCode;
(function (UserStatusCode) {
    // Undefined [0] 
    UserStatusCode[UserStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // User is registered and pending verification [1] 
    UserStatusCode[UserStatusCode["PENDING"] = 1] = "PENDING";
    // Active user in the system [2] 
    UserStatusCode[UserStatusCode["ACTIVE"] = 2] = "ACTIVE";
    // Blocked user (only account system can unblock the user) [3] 
    UserStatusCode[UserStatusCode["BLOCKED"] = 3] = "BLOCKED";
    // Suspended user (about to be deleted) [4] 
    UserStatusCode[UserStatusCode["SUSPENDED"] = 4] = "SUSPENDED";
})(UserStatusCode || (UserStatusCode = {}));
// Return list of UserStatusCode values and their display names
export function GetUserStatusCodes() {
    let result = new Map();
    result.set(UserStatusCode.UNDEFINED, 'Undefined');
    result.set(UserStatusCode.PENDING, 'Pending');
    result.set(UserStatusCode.ACTIVE, 'Active');
    result.set(UserStatusCode.BLOCKED, 'Blocked');
    result.set(UserStatusCode.SUSPENDED, 'Suspended');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclN0YXR1c0NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29veC1saWIvc3JjL2xpYi9Vc2VyU3RhdHVzQ29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw0RUFBNEU7QUFDNUUsTUFBTSxDQUFOLElBQVksY0FpQlg7QUFqQkQsV0FBWSxjQUFjO0lBRXRCLGlCQUFpQjtJQUNqQiw2REFBYSxDQUFBO0lBRWIsbURBQW1EO0lBQ25ELHlEQUFXLENBQUE7SUFFWCxpQ0FBaUM7SUFDakMsdURBQVUsQ0FBQTtJQUVWLCtEQUErRDtJQUMvRCx5REFBVyxDQUFBO0lBRVgsNENBQTRDO0lBQzVDLDZEQUFhLENBQUE7QUFFakIsQ0FBQyxFQWpCVyxjQUFjLEtBQWQsY0FBYyxRQWlCekI7QUFFRCwrREFBK0Q7QUFDL0QsTUFBTSxVQUFVLGtCQUFrQjtJQUU5QixJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztJQUcvQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBR2xELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLy8gVXNlclN0YXR1c0NvZGUgcmVwcmVzZW50cyB0aGUgdXNlciBzdGF0dXM6IFBFTkRJTkcgfCBBQ1RJVkUgfCBCTE9DS0VEIC4uLlxuZXhwb3J0IGVudW0gVXNlclN0YXR1c0NvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBVc2VyIGlzIHJlZ2lzdGVyZWQgYW5kIHBlbmRpbmcgdmVyaWZpY2F0aW9uIFsxXSBcbiAgICBQRU5ESU5HID0gMSxcbiBcbiAgICAvLyBBY3RpdmUgdXNlciBpbiB0aGUgc3lzdGVtIFsyXSBcbiAgICBBQ1RJVkUgPSAyLFxuIFxuICAgIC8vIEJsb2NrZWQgdXNlciAob25seSBhY2NvdW50IHN5c3RlbSBjYW4gdW5ibG9jayB0aGUgdXNlcikgWzNdIFxuICAgIEJMT0NLRUQgPSAzLFxuIFxuICAgIC8vIFN1c3BlbmRlZCB1c2VyIChhYm91dCB0byBiZSBkZWxldGVkKSBbNF0gXG4gICAgU1VTUEVOREVEID0gNCxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgVXNlclN0YXR1c0NvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0VXNlclN0YXR1c0NvZGVzKCkgOiBNYXA8VXNlclN0YXR1c0NvZGUsIHN0cmluZz4ge1xuXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8VXNlclN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuICAgIHJlc3VsdC5zZXQoVXNlclN0YXR1c0NvZGUuVU5ERUZJTkVELCAnVW5kZWZpbmVkJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChVc2VyU3RhdHVzQ29kZS5QRU5ESU5HLCAnUGVuZGluZycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoVXNlclN0YXR1c0NvZGUuQUNUSVZFLCAnQWN0aXZlJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChVc2VyU3RhdHVzQ29kZS5CTE9DS0VELCAnQmxvY2tlZCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoVXNlclN0YXR1c0NvZGUuU1VTUEVOREVELCAnU3VzcGVuZGVkJyk7XG4gICAgXG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19