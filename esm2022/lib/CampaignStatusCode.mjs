import { Tuple } from '.';
// CampaignStatusCode represents the campaign status: PLANNING | ACTIVE | COMPLETED ...
export var CampaignStatusCode;
(function (CampaignStatusCode) {
    // Undefined [0] 
    CampaignStatusCode[CampaignStatusCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Planned campaign [1] 
    CampaignStatusCode[CampaignStatusCode["PLANNING"] = 1] = "PLANNING";
    // Active campaign [2] 
    CampaignStatusCode[CampaignStatusCode["ACTIVE"] = 2] = "ACTIVE";
    // `Completed campaign [3] 
    CampaignStatusCode[CampaignStatusCode["COMPLETED"] = 3] = "COMPLETED";
    // Suspended (about to be deleted) [4] 
    CampaignStatusCode[CampaignStatusCode["SUSPENDED"] = 4] = "SUSPENDED";
})(CampaignStatusCode || (CampaignStatusCode = {}));
// Return list of CampaignStatusCode values and their display names
export function GetCampaignStatusCodes() {
    let result = [];
    result.push(new Tuple(CampaignStatusCode.PLANNING, 'CampaignStatusCode.PLANNING'));
    result.push(new Tuple(CampaignStatusCode.ACTIVE, 'CampaignStatusCode.ACTIVE'));
    result.push(new Tuple(CampaignStatusCode.COMPLETED, 'CampaignStatusCode.COMPLETED'));
    result.push(new Tuple(CampaignStatusCode.SUSPENDED, 'CampaignStatusCode.SUSPENDED'));
    return result;
}
// Return map of CampaignStatusCode values and their display names
export function MapCampaignStatusCodes() {
    let result = new Map();
    result.set(CampaignStatusCode.UNDEFINED, 'Undefined');
    result.set(CampaignStatusCode.PLANNING, 'Planning');
    result.set(CampaignStatusCode.ACTIVE, 'Active');
    result.set(CampaignStatusCode.COMPLETED, 'Completed');
    result.set(CampaignStatusCode.SUSPENDED, 'Suspended');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FtcGFpZ25TdGF0dXNDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvb3gtbGliL3NyYy9saWIvQ2FtcGFpZ25TdGF0dXNDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFHMUIsdUZBQXVGO0FBQ3ZGLE1BQU0sQ0FBTixJQUFZLGtCQWlCWDtBQWpCRCxXQUFZLGtCQUFrQjtJQUUxQixpQkFBaUI7SUFDakIscUVBQWEsQ0FBQTtJQUViLHdCQUF3QjtJQUN4QixtRUFBWSxDQUFBO0lBRVosdUJBQXVCO0lBQ3ZCLCtEQUFVLENBQUE7SUFFViwyQkFBMkI7SUFDM0IscUVBQWEsQ0FBQTtJQUViLHVDQUF1QztJQUN2QyxxRUFBYSxDQUFBO0FBRWpCLENBQUMsRUFqQlcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQWlCN0I7QUFFRCxtRUFBbUU7QUFDbkUsTUFBTSxVQUFVLHNCQUFzQjtJQUNyQyxJQUFJLE1BQU0sR0FBeUMsRUFBRSxDQUFDO0lBR3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTZCLGtCQUFrQixDQUFDLFFBQVEsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDLENBQUE7SUFFOUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBNkIsa0JBQWtCLENBQUMsTUFBTSxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUUxRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUE2QixrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsOEJBQThCLENBQUMsQ0FBQyxDQUFBO0lBRWhILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQTZCLGtCQUFrQixDQUFDLFNBQVMsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDLENBQUE7SUFHN0csT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELGtFQUFrRTtBQUNsRSxNQUFNLFVBQVUsc0JBQXNCO0lBQ2xDLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO0lBR3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXRELE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXBELE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXRELE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBR25ELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFR1cGxlIH0gZnJvbSAnLic7XG5cblxuLy8gQ2FtcGFpZ25TdGF0dXNDb2RlIHJlcHJlc2VudHMgdGhlIGNhbXBhaWduIHN0YXR1czogUExBTk5JTkcgfCBBQ1RJVkUgfCBDT01QTEVURUQgLi4uXG5leHBvcnQgZW51bSBDYW1wYWlnblN0YXR1c0NvZGUge1xuIFxuICAgIC8vIFVuZGVmaW5lZCBbMF0gXG4gICAgVU5ERUZJTkVEID0gMCxcbiBcbiAgICAvLyBQbGFubmVkIGNhbXBhaWduIFsxXSBcbiAgICBQTEFOTklORyA9IDEsXG4gXG4gICAgLy8gQWN0aXZlIGNhbXBhaWduIFsyXSBcbiAgICBBQ1RJVkUgPSAyLFxuIFxuICAgIC8vIGBDb21wbGV0ZWQgY2FtcGFpZ24gWzNdIFxuICAgIENPTVBMRVRFRCA9IDMsXG4gXG4gICAgLy8gU3VzcGVuZGVkIChhYm91dCB0byBiZSBkZWxldGVkKSBbNF0gXG4gICAgU1VTUEVOREVEID0gNCxcbiBcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgQ2FtcGFpZ25TdGF0dXNDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIEdldENhbXBhaWduU3RhdHVzQ29kZXMoKSA6IFR1cGxlPENhbXBhaWduU3RhdHVzQ29kZSwgc3RyaW5nPltdIHtcblx0bGV0IHJlc3VsdCA6IFR1cGxlPENhbXBhaWduU3RhdHVzQ29kZSwgc3RyaW5nPltdID0gW107XG5cbiAgICBcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPENhbXBhaWduU3RhdHVzQ29kZSwgc3RyaW5nPihDYW1wYWlnblN0YXR1c0NvZGUuUExBTk5JTkcsICdDYW1wYWlnblN0YXR1c0NvZGUuUExBTk5JTkcnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxDYW1wYWlnblN0YXR1c0NvZGUsIHN0cmluZz4oQ2FtcGFpZ25TdGF0dXNDb2RlLkFDVElWRSwgJ0NhbXBhaWduU3RhdHVzQ29kZS5BQ1RJVkUnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxDYW1wYWlnblN0YXR1c0NvZGUsIHN0cmluZz4oQ2FtcGFpZ25TdGF0dXNDb2RlLkNPTVBMRVRFRCwgJ0NhbXBhaWduU3RhdHVzQ29kZS5DT01QTEVURUQnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxDYW1wYWlnblN0YXR1c0NvZGUsIHN0cmluZz4oQ2FtcGFpZ25TdGF0dXNDb2RlLlNVU1BFTkRFRCwgJ0NhbXBhaWduU3RhdHVzQ29kZS5TVVNQRU5ERUQnKSlcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBSZXR1cm4gbWFwIG9mIENhbXBhaWduU3RhdHVzQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBDYW1wYWlnblN0YXR1c0NvZGVzKCkgOiBNYXA8Q2FtcGFpZ25TdGF0dXNDb2RlLCBzdHJpbmc+IHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxDYW1wYWlnblN0YXR1c0NvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KENhbXBhaWduU3RhdHVzQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoQ2FtcGFpZ25TdGF0dXNDb2RlLlBMQU5OSU5HLCAnUGxhbm5pbmcnKTtcblx0XG5cdHJlc3VsdC5zZXQoQ2FtcGFpZ25TdGF0dXNDb2RlLkFDVElWRSwgJ0FjdGl2ZScpO1xuXHRcblx0cmVzdWx0LnNldChDYW1wYWlnblN0YXR1c0NvZGUuQ09NUExFVEVELCAnQ29tcGxldGVkJyk7XG5cdFxuXHRyZXN1bHQuc2V0KENhbXBhaWduU3RhdHVzQ29kZS5TVVNQRU5ERUQsICdTdXNwZW5kZWQnKTtcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19