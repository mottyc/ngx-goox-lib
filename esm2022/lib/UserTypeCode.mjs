import { Tuple } from '.';
// UserTypeCode represents the user type: SYSADMIN | SUPPORT | USER ...
export var UserTypeCode;
(function (UserTypeCode) {
    // Undefined [0] 
    UserTypeCode[UserTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // System administrator has access to all accounts and permissions to perform all actions [1] 
    UserTypeCode[UserTypeCode["SYSADMIN"] = 1] = "SYSADMIN";
    // Support user has view permissions only for all accounts that enabled option Enable Support [2] 
    UserTypeCode[UserTypeCode["SUPPORT"] = 2] = "SUPPORT";
    // Account user - has access to specific accounts with role based access control [3] 
    UserTypeCode[UserTypeCode["USER"] = 3] = "USER";
    // Service Account - to be used by other systems to perform actions using the API (can't login as a user to the portal) [4] 
    UserTypeCode[UserTypeCode["SERVICE"] = 4] = "SERVICE";
})(UserTypeCode || (UserTypeCode = {}));
// Return list of UserTypeCode values and their display names
export function GetUserTypeCodes() {
    let result = [];
    result.push(new Tuple(UserTypeCode.SYSADMIN, 'UserTypeCode.SYSADMIN'));
    result.push(new Tuple(UserTypeCode.SUPPORT, 'UserTypeCode.SUPPORT'));
    result.push(new Tuple(UserTypeCode.USER, 'UserTypeCode.USER'));
    result.push(new Tuple(UserTypeCode.SERVICE, 'UserTypeCode.SERVICE'));
    return result;
}
// Return map of UserTypeCode values and their display names
export function MapUserTypeCodes() {
    let result = new Map();
    result.set(UserTypeCode.UNDEFINED, 'Undefined');
    result.set(UserTypeCode.SYSADMIN, 'Sysadmin');
    result.set(UserTypeCode.SUPPORT, 'Support');
    result.set(UserTypeCode.USER, 'User');
    result.set(UserTypeCode.SERVICE, 'Service');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclR5cGVDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvb3gtbGliL3NyYy9saWIvVXNlclR5cGVDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFHMUIsdUVBQXVFO0FBQ3ZFLE1BQU0sQ0FBTixJQUFZLFlBaUJYO0FBakJELFdBQVksWUFBWTtJQUVwQixpQkFBaUI7SUFDakIseURBQWEsQ0FBQTtJQUViLDhGQUE4RjtJQUM5Rix1REFBWSxDQUFBO0lBRVosa0dBQWtHO0lBQ2xHLHFEQUFXLENBQUE7SUFFWCxxRkFBcUY7SUFDckYsK0NBQVEsQ0FBQTtJQUVSLDRIQUE0SDtJQUM1SCxxREFBVyxDQUFBO0FBRWYsQ0FBQyxFQWpCVyxZQUFZLEtBQVosWUFBWSxRQWlCdkI7QUFFRCw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLGdCQUFnQjtJQUMvQixJQUFJLE1BQU0sR0FBbUMsRUFBRSxDQUFDO0lBR2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXVCLFlBQVksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxDQUFBO0lBRTVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXVCLFlBQVksQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxDQUFBO0lBRTFGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXVCLFlBQVksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFBO0lBRXBGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQXVCLFlBQVksQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxDQUFBO0lBR3ZGLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCw0REFBNEQ7QUFDNUQsTUFBTSxVQUFVLGdCQUFnQjtJQUM1QixJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztJQUdoRCxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBR3pDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFR1cGxlIH0gZnJvbSAnLic7XG5cblxuLy8gVXNlclR5cGVDb2RlIHJlcHJlc2VudHMgdGhlIHVzZXIgdHlwZTogU1lTQURNSU4gfCBTVVBQT1JUIHwgVVNFUiAuLi5cbmV4cG9ydCBlbnVtIFVzZXJUeXBlQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIFN5c3RlbSBhZG1pbmlzdHJhdG9yIGhhcyBhY2Nlc3MgdG8gYWxsIGFjY291bnRzIGFuZCBwZXJtaXNzaW9ucyB0byBwZXJmb3JtIGFsbCBhY3Rpb25zIFsxXSBcbiAgICBTWVNBRE1JTiA9IDEsXG4gXG4gICAgLy8gU3VwcG9ydCB1c2VyIGhhcyB2aWV3IHBlcm1pc3Npb25zIG9ubHkgZm9yIGFsbCBhY2NvdW50cyB0aGF0IGVuYWJsZWQgb3B0aW9uIEVuYWJsZSBTdXBwb3J0IFsyXSBcbiAgICBTVVBQT1JUID0gMixcbiBcbiAgICAvLyBBY2NvdW50IHVzZXIgLSBoYXMgYWNjZXNzIHRvIHNwZWNpZmljIGFjY291bnRzIHdpdGggcm9sZSBiYXNlZCBhY2Nlc3MgY29udHJvbCBbM10gXG4gICAgVVNFUiA9IDMsXG4gXG4gICAgLy8gU2VydmljZSBBY2NvdW50IC0gdG8gYmUgdXNlZCBieSBvdGhlciBzeXN0ZW1zIHRvIHBlcmZvcm0gYWN0aW9ucyB1c2luZyB0aGUgQVBJIChjYW4ndCBsb2dpbiBhcyBhIHVzZXIgdG8gdGhlIHBvcnRhbCkgWzRdIFxuICAgIFNFUlZJQ0UgPSA0LFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBVc2VyVHlwZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0VXNlclR5cGVDb2RlcygpIDogVHVwbGU8VXNlclR5cGVDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8VXNlclR5cGVDb2RlLCBzdHJpbmc+W10gPSBbXTtcblxuICAgIFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8VXNlclR5cGVDb2RlLCBzdHJpbmc+KFVzZXJUeXBlQ29kZS5TWVNBRE1JTiwgJ1VzZXJUeXBlQ29kZS5TWVNBRE1JTicpKVxuXHRcblx0cmVzdWx0LnB1c2gobmV3IFR1cGxlPFVzZXJUeXBlQ29kZSwgc3RyaW5nPihVc2VyVHlwZUNvZGUuU1VQUE9SVCwgJ1VzZXJUeXBlQ29kZS5TVVBQT1JUJykpXG5cdFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8VXNlclR5cGVDb2RlLCBzdHJpbmc+KFVzZXJUeXBlQ29kZS5VU0VSLCAnVXNlclR5cGVDb2RlLlVTRVInKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxVc2VyVHlwZUNvZGUsIHN0cmluZz4oVXNlclR5cGVDb2RlLlNFUlZJQ0UsICdVc2VyVHlwZUNvZGUuU0VSVklDRScpKVxuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFJldHVybiBtYXAgb2YgVXNlclR5cGVDb2RlIHZhbHVlcyBhbmQgdGhlaXIgZGlzcGxheSBuYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIE1hcFVzZXJUeXBlQ29kZXMoKSA6IE1hcDxVc2VyVHlwZUNvZGUsIHN0cmluZz4ge1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWFwPFVzZXJUeXBlQ29kZSwgc3RyaW5nPigpO1xuXG4gICAgXG5cdHJlc3VsdC5zZXQoVXNlclR5cGVDb2RlLlVOREVGSU5FRCwgJ1VuZGVmaW5lZCcpO1xuXHRcblx0cmVzdWx0LnNldChVc2VyVHlwZUNvZGUuU1lTQURNSU4sICdTeXNhZG1pbicpO1xuXHRcblx0cmVzdWx0LnNldChVc2VyVHlwZUNvZGUuU1VQUE9SVCwgJ1N1cHBvcnQnKTtcblx0XG5cdHJlc3VsdC5zZXQoVXNlclR5cGVDb2RlLlVTRVIsICdVc2VyJyk7XG5cdFxuXHRyZXN1bHQuc2V0KFVzZXJUeXBlQ29kZS5TRVJWSUNFLCAnU2VydmljZScpO1xuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=