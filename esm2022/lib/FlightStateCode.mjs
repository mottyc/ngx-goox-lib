import { Tuple } from '.';
// FlightStateCode represents a flight state which can't be modified manually: PENDING | ACTIVE | COMPLETED  ...
export var FlightStateCode;
(function (FlightStateCode) {
    // Undefined [0] 
    FlightStateCode[FlightStateCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Pending (Not started) [1] 
    FlightStateCode[FlightStateCode["PENDING"] = 1] = "PENDING";
    // Active (on flight) [2] 
    FlightStateCode[FlightStateCode["ACTIVE"] = 2] = "ACTIVE";
    // Completed [3] 
    FlightStateCode[FlightStateCode["COMPLETED"] = 3] = "COMPLETED";
})(FlightStateCode || (FlightStateCode = {}));
// Return list of FlightStateCode values and their display names
export function GetFlightStateCodes() {
    let result = [];
    result.push(new Tuple(FlightStateCode.PENDING, 'FlightStateCode.PENDING'));
    result.push(new Tuple(FlightStateCode.ACTIVE, 'FlightStateCode.ACTIVE'));
    result.push(new Tuple(FlightStateCode.COMPLETED, 'FlightStateCode.COMPLETED'));
    return result;
}
// Return map of FlightStateCode values and their display names
export function MapFlightStateCodes() {
    let result = new Map();
    result.set(FlightStateCode.UNDEFINED, 'Undefined');
    result.set(FlightStateCode.PENDING, 'Pending');
    result.set(FlightStateCode.ACTIVE, 'Active');
    result.set(FlightStateCode.COMPLETED, 'Completed');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxpZ2h0U3RhdGVDb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvb3gtbGliL3NyYy9saWIvRmxpZ2h0U3RhdGVDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFHMUIsZ0hBQWdIO0FBQ2hILE1BQU0sQ0FBTixJQUFZLGVBY1g7QUFkRCxXQUFZLGVBQWU7SUFFdkIsaUJBQWlCO0lBQ2pCLCtEQUFhLENBQUE7SUFFYiw2QkFBNkI7SUFDN0IsMkRBQVcsQ0FBQTtJQUVYLDBCQUEwQjtJQUMxQix5REFBVSxDQUFBO0lBRVYsaUJBQWlCO0lBQ2pCLCtEQUFhLENBQUE7QUFFakIsQ0FBQyxFQWRXLGVBQWUsS0FBZixlQUFlLFFBYzFCO0FBRUQsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxtQkFBbUI7SUFDbEMsSUFBSSxNQUFNLEdBQXNDLEVBQUUsQ0FBQztJQUduRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFDLENBQUMsQ0FBQTtJQUVuRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQTtJQUVqRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUEwQixlQUFlLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUdwRyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxtQkFBbUI7SUFDL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUM7SUFHbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRW5ELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUUvQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBR2hELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFR1cGxlIH0gZnJvbSAnLic7XG5cblxuLy8gRmxpZ2h0U3RhdGVDb2RlIHJlcHJlc2VudHMgYSBmbGlnaHQgc3RhdGUgd2hpY2ggY2FuJ3QgYmUgbW9kaWZpZWQgbWFudWFsbHk6IFBFTkRJTkcgfCBBQ1RJVkUgfCBDT01QTEVURUQgIC4uLlxuZXhwb3J0IGVudW0gRmxpZ2h0U3RhdGVDb2RlIHtcbiBcbiAgICAvLyBVbmRlZmluZWQgWzBdIFxuICAgIFVOREVGSU5FRCA9IDAsXG4gXG4gICAgLy8gUGVuZGluZyAoTm90IHN0YXJ0ZWQpIFsxXSBcbiAgICBQRU5ESU5HID0gMSxcbiBcbiAgICAvLyBBY3RpdmUgKG9uIGZsaWdodCkgWzJdIFxuICAgIEFDVElWRSA9IDIsXG4gXG4gICAgLy8gQ29tcGxldGVkIFszXSBcbiAgICBDT01QTEVURUQgPSAzLFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBGbGlnaHRTdGF0ZUNvZGUgdmFsdWVzIGFuZCB0aGVpciBkaXNwbGF5IG5hbWVzXG5leHBvcnQgZnVuY3Rpb24gR2V0RmxpZ2h0U3RhdGVDb2RlcygpIDogVHVwbGU8RmxpZ2h0U3RhdGVDb2RlLCBzdHJpbmc+W10ge1xuXHRsZXQgcmVzdWx0IDogVHVwbGU8RmxpZ2h0U3RhdGVDb2RlLCBzdHJpbmc+W10gPSBbXTtcblxuICAgIFxuXHRyZXN1bHQucHVzaChuZXcgVHVwbGU8RmxpZ2h0U3RhdGVDb2RlLCBzdHJpbmc+KEZsaWdodFN0YXRlQ29kZS5QRU5ESU5HLCAnRmxpZ2h0U3RhdGVDb2RlLlBFTkRJTkcnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRTdGF0ZUNvZGUsIHN0cmluZz4oRmxpZ2h0U3RhdGVDb2RlLkFDVElWRSwgJ0ZsaWdodFN0YXRlQ29kZS5BQ1RJVkUnKSlcblx0XG5cdHJlc3VsdC5wdXNoKG5ldyBUdXBsZTxGbGlnaHRTdGF0ZUNvZGUsIHN0cmluZz4oRmxpZ2h0U3RhdGVDb2RlLkNPTVBMRVRFRCwgJ0ZsaWdodFN0YXRlQ29kZS5DT01QTEVURUQnKSlcblx0XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBSZXR1cm4gbWFwIG9mIEZsaWdodFN0YXRlQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBNYXBGbGlnaHRTdGF0ZUNvZGVzKCkgOiBNYXA8RmxpZ2h0U3RhdGVDb2RlLCBzdHJpbmc+IHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxGbGlnaHRTdGF0ZUNvZGUsIHN0cmluZz4oKTtcblxuICAgIFxuXHRyZXN1bHQuc2V0KEZsaWdodFN0YXRlQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0U3RhdGVDb2RlLlBFTkRJTkcsICdQZW5kaW5nJyk7XG5cdFxuXHRyZXN1bHQuc2V0KEZsaWdodFN0YXRlQ29kZS5BQ1RJVkUsICdBY3RpdmUnKTtcblx0XG5cdHJlc3VsdC5zZXQoRmxpZ2h0U3RhdGVDb2RlLkNPTVBMRVRFRCwgJ0NvbXBsZXRlZCcpO1xuXHRcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=